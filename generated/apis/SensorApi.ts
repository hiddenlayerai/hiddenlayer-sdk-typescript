/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSensorRequest,
  Sensor,
  SensorQueryResponse,
  SensorSORModelCardQueryResponse,
  SensorSORQueryRequest,
  ValidationErrorModel,
} from '../models/index';
import {
    CreateSensorRequestFromJSON,
    CreateSensorRequestToJSON,
    SensorFromJSON,
    SensorToJSON,
    SensorQueryResponseFromJSON,
    SensorQueryResponseToJSON,
    SensorSORModelCardQueryResponseFromJSON,
    SensorSORModelCardQueryResponseToJSON,
    SensorSORQueryRequestFromJSON,
    SensorSORQueryRequestToJSON,
    ValidationErrorModelFromJSON,
    ValidationErrorModelToJSON,
} from '../models/index';

export interface CreateSensorOperationRequest {
    createSensorRequest: CreateSensorRequest;
}

export interface DeleteSensorRequest {
    sensorId: string;
}

export interface GetSensorRequest {
    sensorId: string;
}

export interface QuerySensorRequest {
    sensorSORQueryRequest?: SensorSORQueryRequest;
}

export interface SensorSorApiV3ModelCardsQueryGetRequest {
    modelNameEq?: string;
    modelNameContains?: string;
    limit?: number;
    offset?: number;
    sort?: string;
}

/**
 * 
 */
export class SensorApi extends runtime.BaseAPI {

    /**
     * Create a Sensor
     */
    async createSensorRaw(requestParameters: CreateSensorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sensor>> {
        if (requestParameters['createSensorRequest'] == null) {
            throw new runtime.RequiredError(
                'createSensorRequest',
                'Required parameter "createSensorRequest" was null or undefined when calling createSensor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/sensors/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSensorRequestToJSON(requestParameters['createSensorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorFromJSON(jsonValue));
    }

    /**
     * Create a Sensor
     */
    async createSensor(requestParameters: CreateSensorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sensor> {
        const response = await this.createSensorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Sensor
     */
    async deleteSensorRaw(requestParameters: DeleteSensorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sensorId'] == null) {
            throw new runtime.RequiredError(
                'sensorId',
                'Required parameter "sensorId" was null or undefined when calling deleteSensor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/sensors/{sensor_id}`.replace(`{${"sensor_id"}}`, encodeURIComponent(String(requestParameters['sensorId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Sensor
     */
    async deleteSensor(requestParameters: DeleteSensorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSensorRaw(requestParameters, initOverrides);
    }

    /**
     * Get Sensor
     */
    async getSensorRaw(requestParameters: GetSensorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sensor>> {
        if (requestParameters['sensorId'] == null) {
            throw new runtime.RequiredError(
                'sensorId',
                'Required parameter "sensorId" was null or undefined when calling getSensor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/sensors/{sensor_id}`.replace(`{${"sensor_id"}}`, encodeURIComponent(String(requestParameters['sensorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorFromJSON(jsonValue));
    }

    /**
     * Get Sensor
     */
    async getSensor(requestParameters: GetSensorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sensor> {
        const response = await this.getSensorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query a Sensor
     */
    async querySensorRaw(requestParameters: QuerySensorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SensorQueryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v2/sensors/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SensorSORQueryRequestToJSON(requestParameters['sensorSORQueryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query a Sensor
     */
    async querySensor(requestParameters: QuerySensorRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SensorQueryResponse> {
        const response = await this.querySensorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Model Cards
     */
    async sensorSorApiV3ModelCardsQueryGetRaw(requestParameters: SensorSorApiV3ModelCardsQueryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SensorSORModelCardQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters['modelNameEq'] != null) {
            queryParameters['model_name[eq]'] = requestParameters['modelNameEq'];
        }

        if (requestParameters['modelNameContains'] != null) {
            queryParameters['model_name[contains]'] = requestParameters['modelNameContains'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/models/v3/cards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorSORModelCardQueryResponseFromJSON(jsonValue));
    }

    /**
     * List Model Cards
     */
    async sensorSorApiV3ModelCardsQueryGet(requestParameters: SensorSorApiV3ModelCardsQueryGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SensorSORModelCardQueryResponse> {
        const response = await this.sensorSorApiV3ModelCardsQueryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

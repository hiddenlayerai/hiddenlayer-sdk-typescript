/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { ArtifactLocation } from './ArtifactLocation';
import {
    ArtifactLocationFromJSON,
    ArtifactLocationFromJSONTyped,
    ArtifactLocationToJSON,
} from './ArtifactLocation';
import type { Replacement } from './Replacement';
import {
    ReplacementFromJSON,
    ReplacementFromJSONTyped,
    ReplacementToJSON,
} from './Replacement';

/**
 * A change to a single artifact.
 * @export
 * @interface ArtifactChange
 */
export interface ArtifactChange {
    /**
     * 
     * @type {ArtifactLocation}
     * @memberof ArtifactChange
     */
    artifactLocation: ArtifactLocation;
    /**
     * An array of replacement objects, each of which represents the replacement of a single region in a single artifact specified by 'artifactLocation'.
     * @type {Array<Replacement>}
     * @memberof ArtifactChange
     */
    replacements: Array<Replacement>;
    /**
     * 
     * @type {PropertyBag}
     * @memberof ArtifactChange
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the ArtifactChange interface.
 */
export function instanceOfArtifactChange(value: object): value is ArtifactChange {
    if (!('artifactLocation' in value) || value['artifactLocation'] === undefined) return false;
    if (!('replacements' in value) || value['replacements'] === undefined) return false;
    return true;
}

export function ArtifactChangeFromJSON(json: any): ArtifactChange {
    return ArtifactChangeFromJSONTyped(json, false);
}

export function ArtifactChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ArtifactChange {
    if (json == null) {
        return json;
    }
    return {
        
        'artifactLocation': ArtifactLocationFromJSON(json['artifactLocation']),
        'replacements': ((json['replacements'] as Array<any>).map(ReplacementFromJSON)),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function ArtifactChangeToJSON(value?: ArtifactChange | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'artifactLocation': ArtifactLocationToJSON(value['artifactLocation']),
        'replacements': ((value['replacements'] as Array<any>).map(ReplacementToJSON)),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


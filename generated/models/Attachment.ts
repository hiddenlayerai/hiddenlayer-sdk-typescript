/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { Rectangle } from './Rectangle';
import {
    RectangleFromJSON,
    RectangleFromJSONTyped,
    RectangleToJSON,
} from './Rectangle';
import type { ArtifactLocation } from './ArtifactLocation';
import {
    ArtifactLocationFromJSON,
    ArtifactLocationFromJSONTyped,
    ArtifactLocationToJSON,
} from './ArtifactLocation';
import type { Region } from './Region';
import {
    RegionFromJSON,
    RegionFromJSONTyped,
    RegionToJSON,
} from './Region';

/**
 * An artifact relevant to a result.
 * @export
 * @interface Attachment
 */
export interface Attachment {
    /**
     * 
     * @type {Message}
     * @memberof Attachment
     */
    description?: Message;
    /**
     * 
     * @type {ArtifactLocation}
     * @memberof Attachment
     */
    artifactLocation: ArtifactLocation;
    /**
     * An array of regions of interest within the attachment.
     * @type {Set<Region>}
     * @memberof Attachment
     */
    regions?: Set<Region>;
    /**
     * An array of rectangles specifying areas of interest within the image.
     * @type {Set<Rectangle>}
     * @memberof Attachment
     */
    rectangles?: Set<Rectangle>;
    /**
     * 
     * @type {PropertyBag}
     * @memberof Attachment
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the Attachment interface.
 */
export function instanceOfAttachment(value: object): value is Attachment {
    if (!('artifactLocation' in value) || value['artifactLocation'] === undefined) return false;
    return true;
}

export function AttachmentFromJSON(json: any): Attachment {
    return AttachmentFromJSONTyped(json, false);
}

export function AttachmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Attachment {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'] == null ? undefined : MessageFromJSON(json['description']),
        'artifactLocation': ArtifactLocationFromJSON(json['artifactLocation']),
        'regions': json['regions'] == null ? undefined : (new Set((json['regions'] as Array<any>).map(RegionFromJSON))),
        'rectangles': json['rectangles'] == null ? undefined : (new Set((json['rectangles'] as Array<any>).map(RectangleFromJSON))),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function AttachmentToJSON(value?: Attachment | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'description': MessageToJSON(value['description']),
        'artifactLocation': ArtifactLocationToJSON(value['artifactLocation']),
        'regions': value['regions'] == null ? undefined : (Array.from(value['regions'] as Set<any>).map(RegionToJSON)),
        'rectangles': value['rectangles'] == null ? undefined : (Array.from(value['rectangles'] as Set<any>).map(RectangleToJSON)),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


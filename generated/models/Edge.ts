/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';

/**
 * Represents a directed edge in a graph.
 * @export
 * @interface Edge
 */
export interface Edge {
    /**
     * A string that uniquely identifies the edge within its graph.
     * @type {string}
     * @memberof Edge
     */
    id: string;
    /**
     * 
     * @type {Message}
     * @memberof Edge
     */
    label?: Message;
    /**
     * Identifies the source node (the node at which the edge starts).
     * @type {string}
     * @memberof Edge
     */
    sourceNodeId: string;
    /**
     * Identifies the target node (the node at which the edge ends).
     * @type {string}
     * @memberof Edge
     */
    targetNodeId: string;
    /**
     * 
     * @type {PropertyBag}
     * @memberof Edge
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the Edge interface.
 */
export function instanceOfEdge(value: object): value is Edge {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('sourceNodeId' in value) || value['sourceNodeId'] === undefined) return false;
    if (!('targetNodeId' in value) || value['targetNodeId'] === undefined) return false;
    return true;
}

export function EdgeFromJSON(json: any): Edge {
    return EdgeFromJSONTyped(json, false);
}

export function EdgeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Edge {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'label': json['label'] == null ? undefined : MessageFromJSON(json['label']),
        'sourceNodeId': json['sourceNodeId'],
        'targetNodeId': json['targetNodeId'],
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function EdgeToJSON(value?: Edge | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'label': MessageToJSON(value['label']),
        'sourceNodeId': value['sourceNodeId'],
        'targetNodeId': value['targetNodeId'],
        'properties': PropertyBagToJSON(value['properties']),
    };
}


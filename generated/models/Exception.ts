/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { Stack } from './Stack';
import {
    StackFromJSON,
    StackFromJSONTyped,
    StackToJSON,
} from './Stack';

/**
 * Describes a runtime exception encountered during the execution of an analysis tool.
 * @export
 * @interface Exception
 */
export interface Exception {
    /**
     * A string that identifies the kind of exception, for example, the fully qualified type name of an object that was thrown, or the symbolic name of a signal.
     * @type {string}
     * @memberof Exception
     */
    kind?: string;
    /**
     * A message that describes the exception.
     * @type {string}
     * @memberof Exception
     */
    message?: string;
    /**
     * 
     * @type {Stack}
     * @memberof Exception
     */
    stack?: Stack;
    /**
     * An array of exception objects each of which is considered a cause of this exception.
     * @type {Array<Exception>}
     * @memberof Exception
     */
    innerExceptions?: Array<Exception>;
    /**
     * 
     * @type {PropertyBag}
     * @memberof Exception
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the Exception interface.
 */
export function instanceOfException(value: object): value is Exception {
    return true;
}

export function ExceptionFromJSON(json: any): Exception {
    return ExceptionFromJSONTyped(json, false);
}

export function ExceptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Exception {
    if (json == null) {
        return json;
    }
    return {
        
        'kind': json['kind'] == null ? undefined : json['kind'],
        'message': json['message'] == null ? undefined : json['message'],
        'stack': json['stack'] == null ? undefined : StackFromJSON(json['stack']),
        'innerExceptions': json['innerExceptions'] == null ? undefined : ((json['innerExceptions'] as Array<any>).map(ExceptionFromJSON)),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function ExceptionToJSON(value?: Exception | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'kind': value['kind'],
        'message': value['message'],
        'stack': StackToJSON(value['stack']),
        'innerExceptions': value['innerExceptions'] == null ? undefined : ((value['innerExceptions'] as Array<any>).map(ExceptionToJSON)),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExternalPropertyFileReference } from './ExternalPropertyFileReference';
import {
    ExternalPropertyFileReferenceFromJSON,
    ExternalPropertyFileReferenceFromJSONTyped,
    ExternalPropertyFileReferenceToJSON,
} from './ExternalPropertyFileReference';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';

/**
 * References to external property files that should be inlined with the content of a root log file.
 * @export
 * @interface ExternalPropertyFileReferences
 */
export interface ExternalPropertyFileReferences {
    /**
     * 
     * @type {ExternalPropertyFileReference}
     * @memberof ExternalPropertyFileReferences
     */
    conversion?: ExternalPropertyFileReference;
    /**
     * An array of external property files containing a run.graphs object to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    graphs?: Set<ExternalPropertyFileReference>;
    /**
     * 
     * @type {ExternalPropertyFileReference}
     * @memberof ExternalPropertyFileReferences
     */
    externalizedProperties?: ExternalPropertyFileReference;
    /**
     * An array of external property files containing run.artifacts arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    artifacts?: Set<ExternalPropertyFileReference>;
    /**
     * An array of external property files containing run.invocations arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    invocations?: Set<ExternalPropertyFileReference>;
    /**
     * An array of external property files containing run.logicalLocations arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    logicalLocations?: Set<ExternalPropertyFileReference>;
    /**
     * An array of external property files containing run.threadFlowLocations arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    threadFlowLocations?: Set<ExternalPropertyFileReference>;
    /**
     * An array of external property files containing run.results arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    results?: Set<ExternalPropertyFileReference>;
    /**
     * An array of external property files containing run.taxonomies arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    taxonomies?: Set<ExternalPropertyFileReference>;
    /**
     * An array of external property files containing run.addresses arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    addresses?: Set<ExternalPropertyFileReference>;
    /**
     * 
     * @type {ExternalPropertyFileReference}
     * @memberof ExternalPropertyFileReferences
     */
    driver?: ExternalPropertyFileReference;
    /**
     * An array of external property files containing run.extensions arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    extensions?: Set<ExternalPropertyFileReference>;
    /**
     * An array of external property files containing run.policies arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    policies?: Set<ExternalPropertyFileReference>;
    /**
     * An array of external property files containing run.translations arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    translations?: Set<ExternalPropertyFileReference>;
    /**
     * An array of external property files containing run.requests arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    webRequests?: Set<ExternalPropertyFileReference>;
    /**
     * An array of external property files containing run.responses arrays to be merged with the root log file.
     * @type {Set<ExternalPropertyFileReference>}
     * @memberof ExternalPropertyFileReferences
     */
    webResponses?: Set<ExternalPropertyFileReference>;
    /**
     * 
     * @type {PropertyBag}
     * @memberof ExternalPropertyFileReferences
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the ExternalPropertyFileReferences interface.
 */
export function instanceOfExternalPropertyFileReferences(value: object): value is ExternalPropertyFileReferences {
    return true;
}

export function ExternalPropertyFileReferencesFromJSON(json: any): ExternalPropertyFileReferences {
    return ExternalPropertyFileReferencesFromJSONTyped(json, false);
}

export function ExternalPropertyFileReferencesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalPropertyFileReferences {
    if (json == null) {
        return json;
    }
    return {
        
        'conversion': json['conversion'] == null ? undefined : ExternalPropertyFileReferenceFromJSON(json['conversion']),
        'graphs': json['graphs'] == null ? undefined : (new Set((json['graphs'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'externalizedProperties': json['externalizedProperties'] == null ? undefined : ExternalPropertyFileReferenceFromJSON(json['externalizedProperties']),
        'artifacts': json['artifacts'] == null ? undefined : (new Set((json['artifacts'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'invocations': json['invocations'] == null ? undefined : (new Set((json['invocations'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'logicalLocations': json['logicalLocations'] == null ? undefined : (new Set((json['logicalLocations'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'threadFlowLocations': json['threadFlowLocations'] == null ? undefined : (new Set((json['threadFlowLocations'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'results': json['results'] == null ? undefined : (new Set((json['results'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'taxonomies': json['taxonomies'] == null ? undefined : (new Set((json['taxonomies'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'addresses': json['addresses'] == null ? undefined : (new Set((json['addresses'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'driver': json['driver'] == null ? undefined : ExternalPropertyFileReferenceFromJSON(json['driver']),
        'extensions': json['extensions'] == null ? undefined : (new Set((json['extensions'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'policies': json['policies'] == null ? undefined : (new Set((json['policies'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'translations': json['translations'] == null ? undefined : (new Set((json['translations'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'webRequests': json['webRequests'] == null ? undefined : (new Set((json['webRequests'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'webResponses': json['webResponses'] == null ? undefined : (new Set((json['webResponses'] as Array<any>).map(ExternalPropertyFileReferenceFromJSON))),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function ExternalPropertyFileReferencesToJSON(value?: ExternalPropertyFileReferences | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'conversion': ExternalPropertyFileReferenceToJSON(value['conversion']),
        'graphs': value['graphs'] == null ? undefined : (Array.from(value['graphs'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'externalizedProperties': ExternalPropertyFileReferenceToJSON(value['externalizedProperties']),
        'artifacts': value['artifacts'] == null ? undefined : (Array.from(value['artifacts'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'invocations': value['invocations'] == null ? undefined : (Array.from(value['invocations'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'logicalLocations': value['logicalLocations'] == null ? undefined : (Array.from(value['logicalLocations'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'threadFlowLocations': value['threadFlowLocations'] == null ? undefined : (Array.from(value['threadFlowLocations'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'results': value['results'] == null ? undefined : (Array.from(value['results'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'taxonomies': value['taxonomies'] == null ? undefined : (Array.from(value['taxonomies'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'addresses': value['addresses'] == null ? undefined : (Array.from(value['addresses'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'driver': ExternalPropertyFileReferenceToJSON(value['driver']),
        'extensions': value['extensions'] == null ? undefined : (Array.from(value['extensions'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'policies': value['policies'] == null ? undefined : (Array.from(value['policies'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'translations': value['translations'] == null ? undefined : (Array.from(value['translations'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'webRequests': value['webRequests'] == null ? undefined : (Array.from(value['webRequests'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'webResponses': value['webResponses'] == null ? undefined : (Array.from(value['webResponses'] as Set<any>).map(ExternalPropertyFileReferenceToJSON)),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


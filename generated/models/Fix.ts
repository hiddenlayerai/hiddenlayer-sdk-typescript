/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { ArtifactChange } from './ArtifactChange';
import {
    ArtifactChangeFromJSON,
    ArtifactChangeFromJSONTyped,
    ArtifactChangeToJSON,
} from './ArtifactChange';

/**
 * A proposed fix for the problem represented by a result object. A fix specifies a set of artifacts to modify. For each artifact, it specifies a set of bytes to remove, and provides a set of new bytes to replace them.
 * @export
 * @interface Fix
 */
export interface Fix {
    /**
     * 
     * @type {Message}
     * @memberof Fix
     */
    description?: Message;
    /**
     * One or more artifact changes that comprise a fix for a result.
     * @type {Set<ArtifactChange>}
     * @memberof Fix
     */
    artifactChanges: Set<ArtifactChange>;
    /**
     * 
     * @type {PropertyBag}
     * @memberof Fix
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the Fix interface.
 */
export function instanceOfFix(value: object): value is Fix {
    if (!('artifactChanges' in value) || value['artifactChanges'] === undefined) return false;
    return true;
}

export function FixFromJSON(json: any): Fix {
    return FixFromJSONTyped(json, false);
}

export function FixFromJSONTyped(json: any, ignoreDiscriminator: boolean): Fix {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'] == null ? undefined : MessageFromJSON(json['description']),
        'artifactChanges': (new Set((json['artifactChanges'] as Array<any>).map(ArtifactChangeFromJSON))),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function FixToJSON(value?: Fix | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'description': MessageToJSON(value['description']),
        'artifactChanges': (Array.from(value['artifactChanges'] as Set<any>).map(ArtifactChangeToJSON)),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


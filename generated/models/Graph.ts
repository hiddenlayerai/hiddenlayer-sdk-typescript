/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { Node } from './Node';
import {
    NodeFromJSON,
    NodeFromJSONTyped,
    NodeToJSON,
} from './Node';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { Edge } from './Edge';
import {
    EdgeFromJSON,
    EdgeFromJSONTyped,
    EdgeToJSON,
} from './Edge';

/**
 * A network of nodes and directed edges that describes some aspect of the structure of the code (for example, a call graph).
 * @export
 * @interface Graph
 */
export interface Graph {
    /**
     * 
     * @type {Message}
     * @memberof Graph
     */
    description?: Message;
    /**
     * An array of node objects representing the nodes of the graph.
     * @type {Set<Node>}
     * @memberof Graph
     */
    nodes?: Set<Node>;
    /**
     * An array of edge objects representing the edges of the graph.
     * @type {Set<Edge>}
     * @memberof Graph
     */
    edges?: Set<Edge>;
    /**
     * 
     * @type {PropertyBag}
     * @memberof Graph
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the Graph interface.
 */
export function instanceOfGraph(value: object): value is Graph {
    return true;
}

export function GraphFromJSON(json: any): Graph {
    return GraphFromJSONTyped(json, false);
}

export function GraphFromJSONTyped(json: any, ignoreDiscriminator: boolean): Graph {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'] == null ? undefined : MessageFromJSON(json['description']),
        'nodes': json['nodes'] == null ? undefined : (new Set((json['nodes'] as Array<any>).map(NodeFromJSON))),
        'edges': json['edges'] == null ? undefined : (new Set((json['edges'] as Array<any>).map(EdgeFromJSON))),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function GraphToJSON(value?: Graph | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'description': MessageToJSON(value['description']),
        'nodes': value['nodes'] == null ? undefined : (Array.from(value['nodes'] as Set<any>).map(NodeToJSON)),
        'edges': value['edges'] == null ? undefined : (Array.from(value['edges'] as Set<any>).map(EdgeToJSON)),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


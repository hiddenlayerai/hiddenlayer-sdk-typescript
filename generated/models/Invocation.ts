/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConfigurationOverride } from './ConfigurationOverride';
import {
    ConfigurationOverrideFromJSON,
    ConfigurationOverrideFromJSONTyped,
    ConfigurationOverrideToJSON,
} from './ConfigurationOverride';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { ArtifactLocation } from './ArtifactLocation';
import {
    ArtifactLocationFromJSON,
    ArtifactLocationFromJSONTyped,
    ArtifactLocationToJSON,
} from './ArtifactLocation';
import type { Notification } from './Notification';
import {
    NotificationFromJSON,
    NotificationFromJSONTyped,
    NotificationToJSON,
} from './Notification';

/**
 * The runtime environment of the analysis tool run.
 * @export
 * @interface Invocation
 */
export interface Invocation {
    /**
     * The command line used to invoke the tool.
     * @type {string}
     * @memberof Invocation
     */
    commandLine?: string;
    /**
     * An array of strings, containing in order the command line arguments passed to the tool from the operating system.
     * @type {Array<string>}
     * @memberof Invocation
     */
    arguments?: Array<string>;
    /**
     * The locations of any response files specified on the tool's command line.
     * @type {Set<ArtifactLocation>}
     * @memberof Invocation
     */
    responseFiles?: Set<ArtifactLocation>;
    /**
     * The Coordinated Universal Time (UTC) date and time at which the invocation started. See "Date/time properties" in the SARIF spec for the required format.
     * @type {Date}
     * @memberof Invocation
     */
    startTimeUtc?: Date;
    /**
     * The Coordinated Universal Time (UTC) date and time at which the invocation ended. See "Date/time properties" in the SARIF spec for the required format.
     * @type {Date}
     * @memberof Invocation
     */
    endTimeUtc?: Date;
    /**
     * The process exit code.
     * @type {number}
     * @memberof Invocation
     */
    exitCode?: number;
    /**
     * An array of configurationOverride objects that describe rules related runtime overrides.
     * @type {Set<ConfigurationOverride>}
     * @memberof Invocation
     */
    ruleConfigurationOverrides?: Set<ConfigurationOverride>;
    /**
     * An array of configurationOverride objects that describe notifications related runtime overrides.
     * @type {Set<ConfigurationOverride>}
     * @memberof Invocation
     */
    notificationConfigurationOverrides?: Set<ConfigurationOverride>;
    /**
     * A list of runtime conditions detected by the tool during the analysis.
     * @type {Array<Notification>}
     * @memberof Invocation
     */
    toolExecutionNotifications?: Array<Notification>;
    /**
     * A list of conditions detected by the tool that are relevant to the tool's configuration.
     * @type {Array<Notification>}
     * @memberof Invocation
     */
    toolConfigurationNotifications?: Array<Notification>;
    /**
     * The reason for the process exit.
     * @type {string}
     * @memberof Invocation
     */
    exitCodeDescription?: string;
    /**
     * The name of the signal that caused the process to exit.
     * @type {string}
     * @memberof Invocation
     */
    exitSignalName?: string;
    /**
     * The numeric value of the signal that caused the process to exit.
     * @type {number}
     * @memberof Invocation
     */
    exitSignalNumber?: number;
    /**
     * The reason given by the operating system that the process failed to start.
     * @type {string}
     * @memberof Invocation
     */
    processStartFailureMessage?: string;
    /**
     * Specifies whether the tool's execution completed successfully.
     * @type {boolean}
     * @memberof Invocation
     */
    executionSuccessful: boolean;
    /**
     * The machine on which the invocation occurred.
     * @type {string}
     * @memberof Invocation
     */
    machine?: string;
    /**
     * The account under which the invocation occurred.
     * @type {string}
     * @memberof Invocation
     */
    account?: string;
    /**
     * The id of the process in which the invocation occurred.
     * @type {number}
     * @memberof Invocation
     */
    processId?: number;
    /**
     * 
     * @type {ArtifactLocation}
     * @memberof Invocation
     */
    executableLocation?: ArtifactLocation;
    /**
     * 
     * @type {ArtifactLocation}
     * @memberof Invocation
     */
    workingDirectory?: ArtifactLocation;
    /**
     * The environment variables associated with the analysis tool process, expressed as key/value pairs.
     * @type {{ [key: string]: string; }}
     * @memberof Invocation
     */
    environmentVariables?: { [key: string]: string; };
    /**
     * 
     * @type {ArtifactLocation}
     * @memberof Invocation
     */
    stdin?: ArtifactLocation;
    /**
     * 
     * @type {ArtifactLocation}
     * @memberof Invocation
     */
    stdout?: ArtifactLocation;
    /**
     * 
     * @type {ArtifactLocation}
     * @memberof Invocation
     */
    stderr?: ArtifactLocation;
    /**
     * 
     * @type {ArtifactLocation}
     * @memberof Invocation
     */
    stdoutStderr?: ArtifactLocation;
    /**
     * 
     * @type {PropertyBag}
     * @memberof Invocation
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the Invocation interface.
 */
export function instanceOfInvocation(value: object): value is Invocation {
    if (!('executionSuccessful' in value) || value['executionSuccessful'] === undefined) return false;
    return true;
}

export function InvocationFromJSON(json: any): Invocation {
    return InvocationFromJSONTyped(json, false);
}

export function InvocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invocation {
    if (json == null) {
        return json;
    }
    return {
        
        'commandLine': json['commandLine'] == null ? undefined : json['commandLine'],
        'arguments': json['arguments'] == null ? undefined : json['arguments'],
        'responseFiles': json['responseFiles'] == null ? undefined : (new Set((json['responseFiles'] as Array<any>).map(ArtifactLocationFromJSON))),
        'startTimeUtc': json['startTimeUtc'] == null ? undefined : (new Date(json['startTimeUtc'])),
        'endTimeUtc': json['endTimeUtc'] == null ? undefined : (new Date(json['endTimeUtc'])),
        'exitCode': json['exitCode'] == null ? undefined : json['exitCode'],
        'ruleConfigurationOverrides': json['ruleConfigurationOverrides'] == null ? undefined : (new Set((json['ruleConfigurationOverrides'] as Array<any>).map(ConfigurationOverrideFromJSON))),
        'notificationConfigurationOverrides': json['notificationConfigurationOverrides'] == null ? undefined : (new Set((json['notificationConfigurationOverrides'] as Array<any>).map(ConfigurationOverrideFromJSON))),
        'toolExecutionNotifications': json['toolExecutionNotifications'] == null ? undefined : ((json['toolExecutionNotifications'] as Array<any>).map(NotificationFromJSON)),
        'toolConfigurationNotifications': json['toolConfigurationNotifications'] == null ? undefined : ((json['toolConfigurationNotifications'] as Array<any>).map(NotificationFromJSON)),
        'exitCodeDescription': json['exitCodeDescription'] == null ? undefined : json['exitCodeDescription'],
        'exitSignalName': json['exitSignalName'] == null ? undefined : json['exitSignalName'],
        'exitSignalNumber': json['exitSignalNumber'] == null ? undefined : json['exitSignalNumber'],
        'processStartFailureMessage': json['processStartFailureMessage'] == null ? undefined : json['processStartFailureMessage'],
        'executionSuccessful': json['executionSuccessful'],
        'machine': json['machine'] == null ? undefined : json['machine'],
        'account': json['account'] == null ? undefined : json['account'],
        'processId': json['processId'] == null ? undefined : json['processId'],
        'executableLocation': json['executableLocation'] == null ? undefined : ArtifactLocationFromJSON(json['executableLocation']),
        'workingDirectory': json['workingDirectory'] == null ? undefined : ArtifactLocationFromJSON(json['workingDirectory']),
        'environmentVariables': json['environmentVariables'] == null ? undefined : json['environmentVariables'],
        'stdin': json['stdin'] == null ? undefined : ArtifactLocationFromJSON(json['stdin']),
        'stdout': json['stdout'] == null ? undefined : ArtifactLocationFromJSON(json['stdout']),
        'stderr': json['stderr'] == null ? undefined : ArtifactLocationFromJSON(json['stderr']),
        'stdoutStderr': json['stdoutStderr'] == null ? undefined : ArtifactLocationFromJSON(json['stdoutStderr']),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function InvocationToJSON(value?: Invocation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'commandLine': value['commandLine'],
        'arguments': value['arguments'],
        'responseFiles': value['responseFiles'] == null ? undefined : (Array.from(value['responseFiles'] as Set<any>).map(ArtifactLocationToJSON)),
        'startTimeUtc': value['startTimeUtc'] == null ? undefined : ((value['startTimeUtc']).toISOString()),
        'endTimeUtc': value['endTimeUtc'] == null ? undefined : ((value['endTimeUtc']).toISOString()),
        'exitCode': value['exitCode'],
        'ruleConfigurationOverrides': value['ruleConfigurationOverrides'] == null ? undefined : (Array.from(value['ruleConfigurationOverrides'] as Set<any>).map(ConfigurationOverrideToJSON)),
        'notificationConfigurationOverrides': value['notificationConfigurationOverrides'] == null ? undefined : (Array.from(value['notificationConfigurationOverrides'] as Set<any>).map(ConfigurationOverrideToJSON)),
        'toolExecutionNotifications': value['toolExecutionNotifications'] == null ? undefined : ((value['toolExecutionNotifications'] as Array<any>).map(NotificationToJSON)),
        'toolConfigurationNotifications': value['toolConfigurationNotifications'] == null ? undefined : ((value['toolConfigurationNotifications'] as Array<any>).map(NotificationToJSON)),
        'exitCodeDescription': value['exitCodeDescription'],
        'exitSignalName': value['exitSignalName'],
        'exitSignalNumber': value['exitSignalNumber'],
        'processStartFailureMessage': value['processStartFailureMessage'],
        'executionSuccessful': value['executionSuccessful'],
        'machine': value['machine'],
        'account': value['account'],
        'processId': value['processId'],
        'executableLocation': ArtifactLocationToJSON(value['executableLocation']),
        'workingDirectory': ArtifactLocationToJSON(value['workingDirectory']),
        'environmentVariables': value['environmentVariables'],
        'stdin': ArtifactLocationToJSON(value['stdin']),
        'stdout': ArtifactLocationToJSON(value['stdout']),
        'stderr': ArtifactLocationToJSON(value['stderr']),
        'stdoutStderr': ArtifactLocationToJSON(value['stdoutStderr']),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { Region } from './Region';
import {
    RegionFromJSON,
    RegionFromJSONTyped,
    RegionToJSON,
} from './Region';
import type { LocationRelationship } from './LocationRelationship';
import {
    LocationRelationshipFromJSON,
    LocationRelationshipFromJSONTyped,
    LocationRelationshipToJSON,
} from './LocationRelationship';
import type { LogicalLocation } from './LogicalLocation';
import {
    LogicalLocationFromJSON,
    LogicalLocationFromJSONTyped,
    LogicalLocationToJSON,
} from './LogicalLocation';
import type { PhysicalLocation } from './PhysicalLocation';
import {
    PhysicalLocationFromJSON,
    PhysicalLocationFromJSONTyped,
    PhysicalLocationToJSON,
} from './PhysicalLocation';

/**
 * A location within a programming artifact.
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * Value that distinguishes this location from all other locations within a single result object.
     * @type {number}
     * @memberof Location
     */
    id?: number;
    /**
     * 
     * @type {PhysicalLocation}
     * @memberof Location
     */
    physicalLocation?: PhysicalLocation;
    /**
     * The logical locations associated with the result.
     * @type {Set<LogicalLocation>}
     * @memberof Location
     */
    logicalLocations?: Set<LogicalLocation>;
    /**
     * 
     * @type {Message}
     * @memberof Location
     */
    message?: Message;
    /**
     * A set of regions relevant to the location.
     * @type {Set<Region>}
     * @memberof Location
     */
    annotations?: Set<Region>;
    /**
     * An array of objects that describe relationships between this location and others.
     * @type {Set<LocationRelationship>}
     * @memberof Location
     */
    relationships?: Set<LocationRelationship>;
    /**
     * 
     * @type {PropertyBag}
     * @memberof Location
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the Location interface.
 */
export function instanceOfLocation(value: object): value is Location {
    return true;
}

export function LocationFromJSON(json: any): Location {
    return LocationFromJSONTyped(json, false);
}

export function LocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Location {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'physicalLocation': json['physicalLocation'] == null ? undefined : PhysicalLocationFromJSON(json['physicalLocation']),
        'logicalLocations': json['logicalLocations'] == null ? undefined : (new Set((json['logicalLocations'] as Array<any>).map(LogicalLocationFromJSON))),
        'message': json['message'] == null ? undefined : MessageFromJSON(json['message']),
        'annotations': json['annotations'] == null ? undefined : (new Set((json['annotations'] as Array<any>).map(RegionFromJSON))),
        'relationships': json['relationships'] == null ? undefined : (new Set((json['relationships'] as Array<any>).map(LocationRelationshipFromJSON))),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function LocationToJSON(value?: Location | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'physicalLocation': PhysicalLocationToJSON(value['physicalLocation']),
        'logicalLocations': value['logicalLocations'] == null ? undefined : (Array.from(value['logicalLocations'] as Set<any>).map(LogicalLocationToJSON)),
        'message': MessageToJSON(value['message']),
        'annotations': value['annotations'] == null ? undefined : (Array.from(value['annotations'] as Set<any>).map(RegionToJSON)),
        'relationships': value['relationships'] == null ? undefined : (Array.from(value['relationships'] as Set<any>).map(LocationRelationshipToJSON)),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


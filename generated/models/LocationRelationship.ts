/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';

/**
 * Information about the relation of one location to another.
 * @export
 * @interface LocationRelationship
 */
export interface LocationRelationship {
    /**
     * A reference to the related location.
     * @type {number}
     * @memberof LocationRelationship
     */
    target: number;
    /**
     * A set of distinct strings that categorize the relationship. Well-known kinds include 'includes', 'isIncludedBy' and 'relevant'.
     * @type {Set<string>}
     * @memberof LocationRelationship
     */
    kinds?: Set<string>;
    /**
     * 
     * @type {Message}
     * @memberof LocationRelationship
     */
    description?: Message;
    /**
     * 
     * @type {PropertyBag}
     * @memberof LocationRelationship
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the LocationRelationship interface.
 */
export function instanceOfLocationRelationship(value: object): value is LocationRelationship {
    if (!('target' in value) || value['target'] === undefined) return false;
    return true;
}

export function LocationRelationshipFromJSON(json: any): LocationRelationship {
    return LocationRelationshipFromJSONTyped(json, false);
}

export function LocationRelationshipFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationRelationship {
    if (json == null) {
        return json;
    }
    return {
        
        'target': json['target'],
        'kinds': json['kinds'] == null ? undefined : json['kinds'],
        'description': json['description'] == null ? undefined : MessageFromJSON(json['description']),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function LocationRelationshipToJSON(value?: LocationRelationship | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'target': value['target'],
        'kinds': value['kinds'] == null ? undefined : Array.from(value['kinds'] as Set<any>),
        'description': MessageToJSON(value['description']),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


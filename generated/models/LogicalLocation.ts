/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';

/**
 * A logical location of a construct that produced a result.
 * @export
 * @interface LogicalLocation
 */
export interface LogicalLocation {
    /**
     * Identifies the construct in which the result occurred. For example, this property might contain the name of a class or a method.
     * @type {string}
     * @memberof LogicalLocation
     */
    name?: string;
    /**
     * The index within the logical locations array.
     * @type {number}
     * @memberof LogicalLocation
     */
    index?: number;
    /**
     * The human-readable fully qualified name of the logical location.
     * @type {string}
     * @memberof LogicalLocation
     */
    fullyQualifiedName?: string;
    /**
     * The machine-readable name for the logical location, such as a mangled function name provided by a C++ compiler that encodes calling convention, return type and other details along with the function name.
     * @type {string}
     * @memberof LogicalLocation
     */
    decoratedName?: string;
    /**
     * Identifies the index of the immediate parent of the construct in which the result was detected. For example, this property might point to a logical location that represents the namespace that holds a type.
     * @type {number}
     * @memberof LogicalLocation
     */
    parentIndex?: number;
    /**
     * The type of construct this logical location component refers to. Should be one of 'function', 'member', 'module', 'namespace', 'parameter', 'resource', 'returnType', 'type', 'variable', 'object', 'array', 'property', 'value', 'element', 'text', 'attribute', 'comment', 'declaration', 'dtd' or 'processingInstruction', if any of those accurately describe the construct.
     * @type {string}
     * @memberof LogicalLocation
     */
    kind?: string;
    /**
     * 
     * @type {PropertyBag}
     * @memberof LogicalLocation
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the LogicalLocation interface.
 */
export function instanceOfLogicalLocation(value: object): value is LogicalLocation {
    return true;
}

export function LogicalLocationFromJSON(json: any): LogicalLocation {
    return LogicalLocationFromJSONTyped(json, false);
}

export function LogicalLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): LogicalLocation {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'index': json['index'] == null ? undefined : json['index'],
        'fullyQualifiedName': json['fullyQualifiedName'] == null ? undefined : json['fullyQualifiedName'],
        'decoratedName': json['decoratedName'] == null ? undefined : json['decoratedName'],
        'parentIndex': json['parentIndex'] == null ? undefined : json['parentIndex'],
        'kind': json['kind'] == null ? undefined : json['kind'],
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function LogicalLocationToJSON(value?: LogicalLocation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'index': value['index'],
        'fullyQualifiedName': value['fullyQualifiedName'],
        'decoratedName': value['decoratedName'],
        'parentIndex': value['parentIndex'],
        'kind': value['kind'],
        'properties': PropertyBagToJSON(value['properties']),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * information about model and version that this scan relates to
 * @export
 * @interface ModelInventoryInfo
 */
export interface ModelInventoryInfo {
    /**
     * name of the model
     * @type {string}
     * @memberof ModelInventoryInfo
     */
    modelName: string;
    /**
     * version of the model
     * @type {string}
     * @memberof ModelInventoryInfo
     */
    modelVersion: string;
    /**
     * source (provider) info
     * @type {string}
     * @memberof ModelInventoryInfo
     */
    modelSource: string;
    /**
     * Location to be scanned
     * @type {string}
     * @memberof ModelInventoryInfo
     */
    requestedScanLocation: string;
    /**
     * Entity that requested the scan
     * @type {string}
     * @memberof ModelInventoryInfo
     */
    requestingEntity?: string;
    /**
     * Unique identifier for the model
     * @type {string}
     * @memberof ModelInventoryInfo
     */
    modelId: string;
    /**
     * unique identifier for the model version
     * @type {string}
     * @memberof ModelInventoryInfo
     */
    modelVersionId: string;
}

/**
 * Check if a given object implements the ModelInventoryInfo interface.
 */
export function instanceOfModelInventoryInfo(value: object): value is ModelInventoryInfo {
    if (!('modelName' in value) || value['modelName'] === undefined) return false;
    if (!('modelVersion' in value) || value['modelVersion'] === undefined) return false;
    if (!('modelSource' in value) || value['modelSource'] === undefined) return false;
    if (!('requestedScanLocation' in value) || value['requestedScanLocation'] === undefined) return false;
    if (!('modelId' in value) || value['modelId'] === undefined) return false;
    if (!('modelVersionId' in value) || value['modelVersionId'] === undefined) return false;
    return true;
}

export function ModelInventoryInfoFromJSON(json: any): ModelInventoryInfo {
    return ModelInventoryInfoFromJSONTyped(json, false);
}

export function ModelInventoryInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelInventoryInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'modelName': json['model_name'],
        'modelVersion': json['model_version'],
        'modelSource': json['model_source'],
        'requestedScanLocation': json['requested_scan_location'],
        'requestingEntity': json['requesting_entity'] == null ? undefined : json['requesting_entity'],
        'modelId': json['model_id'],
        'modelVersionId': json['model_version_id'],
    };
}

export function ModelInventoryInfoToJSON(value?: ModelInventoryInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'model_name': value['modelName'],
        'model_version': value['modelVersion'],
        'model_source': value['modelSource'],
        'requested_scan_location': value['requestedScanLocation'],
        'requesting_entity': value['requestingEntity'],
        'model_id': value['modelId'],
        'model_version_id': value['modelVersionId'],
    };
}


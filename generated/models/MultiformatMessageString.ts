/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';

/**
 * A message string or message format string rendered in multiple formats.
 * @export
 * @interface MultiformatMessageString
 */
export interface MultiformatMessageString {
    /**
     * A plain text message string or format string.
     * @type {string}
     * @memberof MultiformatMessageString
     */
    text: string;
    /**
     * A Markdown message string or format string.
     * @type {string}
     * @memberof MultiformatMessageString
     */
    markdown?: string;
    /**
     * 
     * @type {PropertyBag}
     * @memberof MultiformatMessageString
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the MultiformatMessageString interface.
 */
export function instanceOfMultiformatMessageString(value: object): value is MultiformatMessageString {
    if (!('text' in value) || value['text'] === undefined) return false;
    return true;
}

export function MultiformatMessageStringFromJSON(json: any): MultiformatMessageString {
    return MultiformatMessageStringFromJSONTyped(json, false);
}

export function MultiformatMessageStringFromJSONTyped(json: any, ignoreDiscriminator: boolean): MultiformatMessageString {
    if (json == null) {
        return json;
    }
    return {
        
        'text': json['text'],
        'markdown': json['markdown'] == null ? undefined : json['markdown'],
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function MultiformatMessageStringToJSON(value?: MultiformatMessageString | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'text': value['text'],
        'markdown': value['markdown'],
        'properties': PropertyBagToJSON(value['properties']),
    };
}


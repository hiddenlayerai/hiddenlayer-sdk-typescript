/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { ReportingDescriptorReference } from './ReportingDescriptorReference';
import {
    ReportingDescriptorReferenceFromJSON,
    ReportingDescriptorReferenceFromJSONTyped,
    ReportingDescriptorReferenceToJSON,
} from './ReportingDescriptorReference';
import type { Exception } from './Exception';
import {
    ExceptionFromJSON,
    ExceptionFromJSONTyped,
    ExceptionToJSON,
} from './Exception';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';

/**
 * Describes a condition relevant to the tool itself, as opposed to being relevant to a target being analyzed by the tool.
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * The locations relevant to this notification.
     * @type {Set<Location>}
     * @memberof Notification
     */
    locations?: Set<Location>;
    /**
     * 
     * @type {Message}
     * @memberof Notification
     */
    message: Message | null;
    /**
     * A value specifying the severity level of the notification.
     * @type {string}
     * @memberof Notification
     */
    level?: NotificationLevelEnum;
    /**
     * The thread identifier of the code that generated the notification.
     * @type {number}
     * @memberof Notification
     */
    threadId?: number;
    /**
     * The Coordinated Universal Time (UTC) date and time at which the analysis tool generated the notification.
     * @type {Date}
     * @memberof Notification
     */
    timeUtc?: Date;
    /**
     * 
     * @type {Exception}
     * @memberof Notification
     */
    exception?: Exception;
    /**
     * 
     * @type {ReportingDescriptorReference}
     * @memberof Notification
     */
    descriptor?: ReportingDescriptorReference;
    /**
     * 
     * @type {ReportingDescriptorReference}
     * @memberof Notification
     */
    associatedRule?: ReportingDescriptorReference;
    /**
     * 
     * @type {PropertyBag}
     * @memberof Notification
     */
    properties?: PropertyBag;
}


/**
 * @export
 */
export const NotificationLevelEnum = {
    None: 'none',
    Note: 'note',
    Warning: 'warning',
    Error: 'error',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type NotificationLevelEnum = typeof NotificationLevelEnum[keyof typeof NotificationLevelEnum];


/**
 * Check if a given object implements the Notification interface.
 */
export function instanceOfNotification(value: object): value is Notification {
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function NotificationFromJSON(json: any): Notification {
    return NotificationFromJSONTyped(json, false);
}

export function NotificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Notification {
    if (json == null) {
        return json;
    }
    return {
        
        'locations': json['locations'] == null ? undefined : (new Set((json['locations'] as Array<any>).map(LocationFromJSON))),
        'message': MessageFromJSON(json['message']),
        'level': json['level'] == null ? undefined : json['level'],
        'threadId': json['threadId'] == null ? undefined : json['threadId'],
        'timeUtc': json['timeUtc'] == null ? undefined : (new Date(json['timeUtc'])),
        'exception': json['exception'] == null ? undefined : ExceptionFromJSON(json['exception']),
        'descriptor': json['descriptor'] == null ? undefined : ReportingDescriptorReferenceFromJSON(json['descriptor']),
        'associatedRule': json['associatedRule'] == null ? undefined : ReportingDescriptorReferenceFromJSON(json['associatedRule']),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function NotificationToJSON(value?: Notification | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'locations': value['locations'] == null ? undefined : (Array.from(value['locations'] as Set<any>).map(LocationToJSON)),
        'message': MessageToJSON(value['message']),
        'level': value['level'],
        'threadId': value['threadId'],
        'timeUtc': value['timeUtc'] == null ? undefined : ((value['timeUtc']).toISOString()),
        'exception': ExceptionToJSON(value['exception']),
        'descriptor': ReportingDescriptorReferenceToJSON(value['descriptor']),
        'associatedRule': ReportingDescriptorReferenceToJSON(value['associatedRule']),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


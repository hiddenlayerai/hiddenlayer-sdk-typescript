/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
} from './Address';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { ArtifactLocation } from './ArtifactLocation';
import {
    ArtifactLocationFromJSON,
    ArtifactLocationFromJSONTyped,
    ArtifactLocationToJSON,
} from './ArtifactLocation';
import type { Region } from './Region';
import {
    RegionFromJSON,
    RegionFromJSONTyped,
    RegionToJSON,
} from './Region';

/**
 * A physical location relevant to a result. Specifies a reference to a programming artifact together with a range of bytes or characters within that artifact.
 * @export
 * @interface PhysicalLocation
 */
export interface PhysicalLocation {
    /**
     * 
     * @type {Address}
     * @memberof PhysicalLocation
     */
    address?: Address;
    /**
     * 
     * @type {ArtifactLocation}
     * @memberof PhysicalLocation
     */
    artifactLocation?: ArtifactLocation;
    /**
     * 
     * @type {Region}
     * @memberof PhysicalLocation
     */
    region?: Region;
    /**
     * 
     * @type {Region}
     * @memberof PhysicalLocation
     */
    contextRegion?: Region;
    /**
     * 
     * @type {PropertyBag}
     * @memberof PhysicalLocation
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the PhysicalLocation interface.
 */
export function instanceOfPhysicalLocation(value: object): value is PhysicalLocation {
    return true;
}

export function PhysicalLocationFromJSON(json: any): PhysicalLocation {
    return PhysicalLocationFromJSONTyped(json, false);
}

export function PhysicalLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): PhysicalLocation {
    if (json == null) {
        return json;
    }
    return {
        
        'address': json['address'] == null ? undefined : AddressFromJSON(json['address']),
        'artifactLocation': json['artifactLocation'] == null ? undefined : ArtifactLocationFromJSON(json['artifactLocation']),
        'region': json['region'] == null ? undefined : RegionFromJSON(json['region']),
        'contextRegion': json['contextRegion'] == null ? undefined : RegionFromJSON(json['contextRegion']),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function PhysicalLocationToJSON(value?: PhysicalLocation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'address': AddressToJSON(value['address']),
        'artifactLocation': ArtifactLocationToJSON(value['artifactLocation']),
        'region': RegionToJSON(value['region']),
        'contextRegion': RegionToJSON(value['contextRegion']),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


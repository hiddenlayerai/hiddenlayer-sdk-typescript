/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ErrorsInner } from './ErrorsInner';
import {
    ErrorsInnerFromJSON,
    ErrorsInnerFromJSONTyped,
    ErrorsInnerToJSON,
} from './ErrorsInner';

/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     * https://www.rfc-editor.org/rfc/rfc9457.html#name-type
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string;
    /**
     * https://www.rfc-editor.org/rfc/rfc9457.html#name-title
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string;
    /**
     * https://www.rfc-editor.org/rfc/rfc9457.html#name-detail
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string;
    /**
     * https://www.rfc-editor.org/rfc/rfc9457.html#name-instance
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string;
    /**
     * Error details
     * @type {Array<ErrorsInner>}
     * @memberof ProblemDetails
     */
    errors: Array<ErrorsInner>;
}

/**
 * Check if a given object implements the ProblemDetails interface.
 */
export function instanceOfProblemDetails(value: object): value is ProblemDetails {
    if (!('errors' in value) || value['errors'] === undefined) return false;
    return true;
}

export function ProblemDetailsFromJSON(json: any): ProblemDetails {
    return ProblemDetailsFromJSONTyped(json, false);
}

export function ProblemDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProblemDetails {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'title': json['title'] == null ? undefined : json['title'],
        'detail': json['detail'] == null ? undefined : json['detail'],
        'instance': json['instance'] == null ? undefined : json['instance'],
        'errors': ((json['errors'] as Array<any>).map(ErrorsInnerFromJSON)),
    };
}

export function ProblemDetailsToJSON(value?: ProblemDetails | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': value['type'],
        'title': value['title'],
        'detail': value['detail'],
        'instance': value['instance'],
        'errors': ((value['errors'] as Array<any>).map(ErrorsInnerToJSON)),
    };
}


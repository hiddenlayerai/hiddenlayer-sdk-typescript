/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';

/**
 * Information about a rule or notification that can be configured at runtime.
 * @export
 * @interface ReportingConfiguration
 */
export interface ReportingConfiguration {
    /**
     * Specifies whether the report may be produced during the scan.
     * @type {boolean}
     * @memberof ReportingConfiguration
     */
    enabled?: boolean;
    /**
     * Specifies the failure level for the report.
     * @type {string}
     * @memberof ReportingConfiguration
     */
    level?: ReportingConfigurationLevelEnum;
    /**
     * Specifies the relative priority of the report. Used for analysis output only.
     * @type {number}
     * @memberof ReportingConfiguration
     */
    rank?: number;
    /**
     * 
     * @type {PropertyBag}
     * @memberof ReportingConfiguration
     */
    parameters?: PropertyBag;
    /**
     * 
     * @type {PropertyBag}
     * @memberof ReportingConfiguration
     */
    properties?: PropertyBag;
}


/**
 * @export
 */
export const ReportingConfigurationLevelEnum = {
    None: 'none',
    Note: 'note',
    Warning: 'warning',
    Error: 'error',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ReportingConfigurationLevelEnum = typeof ReportingConfigurationLevelEnum[keyof typeof ReportingConfigurationLevelEnum];


/**
 * Check if a given object implements the ReportingConfiguration interface.
 */
export function instanceOfReportingConfiguration(value: object): value is ReportingConfiguration {
    return true;
}

export function ReportingConfigurationFromJSON(json: any): ReportingConfiguration {
    return ReportingConfigurationFromJSONTyped(json, false);
}

export function ReportingConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportingConfiguration {
    if (json == null) {
        return json;
    }
    return {
        
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'level': json['level'] == null ? undefined : json['level'],
        'rank': json['rank'] == null ? undefined : json['rank'],
        'parameters': json['parameters'] == null ? undefined : PropertyBagFromJSON(json['parameters']),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function ReportingConfigurationToJSON(value?: ReportingConfiguration | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'enabled': value['enabled'],
        'level': value['level'],
        'rank': value['rank'],
        'parameters': PropertyBagToJSON(value['parameters']),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


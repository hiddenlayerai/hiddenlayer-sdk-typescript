/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReportingDescriptorRelationship } from './ReportingDescriptorRelationship';
import {
    ReportingDescriptorRelationshipFromJSON,
    ReportingDescriptorRelationshipFromJSONTyped,
    ReportingDescriptorRelationshipToJSON,
} from './ReportingDescriptorRelationship';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { MultiformatMessageString } from './MultiformatMessageString';
import {
    MultiformatMessageStringFromJSON,
    MultiformatMessageStringFromJSONTyped,
    MultiformatMessageStringToJSON,
} from './MultiformatMessageString';
import type { ReportingConfiguration } from './ReportingConfiguration';
import {
    ReportingConfigurationFromJSON,
    ReportingConfigurationFromJSONTyped,
    ReportingConfigurationToJSON,
} from './ReportingConfiguration';

/**
 * Metadata that describes a specific report produced by the tool, as part of the analysis it provides or its runtime reporting.
 * @export
 * @interface ReportingDescriptor
 */
export interface ReportingDescriptor {
    /**
     * A stable, opaque identifier for the report.
     * @type {string}
     * @memberof ReportingDescriptor
     */
    id: string;
    /**
     * An array of stable, opaque identifiers by which this report was known in some previous version of the analysis tool.
     * @type {Set<string>}
     * @memberof ReportingDescriptor
     */
    deprecatedIds?: Set<string>;
    /**
     * A unique identifier for the reporting descriptor in the form of a GUID.
     * @type {string}
     * @memberof ReportingDescriptor
     */
    guid?: string;
    /**
     * An array of unique identifies in the form of a GUID by which this report was known in some previous version of the analysis tool.
     * @type {Set<string>}
     * @memberof ReportingDescriptor
     */
    deprecatedGuids?: Set<string>;
    /**
     * A report identifier that is understandable to an end user.
     * @type {string}
     * @memberof ReportingDescriptor
     */
    name?: string;
    /**
     * An array of readable identifiers by which this report was known in some previous version of the analysis tool.
     * @type {Set<string>}
     * @memberof ReportingDescriptor
     */
    deprecatedNames?: Set<string>;
    /**
     * 
     * @type {MultiformatMessageString}
     * @memberof ReportingDescriptor
     */
    shortDescription?: MultiformatMessageString;
    /**
     * 
     * @type {MultiformatMessageString}
     * @memberof ReportingDescriptor
     */
    fullDescription?: MultiformatMessageString;
    /**
     * A set of name/value pairs with arbitrary names. Each value is a multiformatMessageString object, which holds message strings in plain text and (optionally) Markdown format. The strings can include placeholders, which can be used to construct a message in combination with an arbitrary number of additional string arguments.
     * @type {{ [key: string]: MultiformatMessageString; }}
     * @memberof ReportingDescriptor
     */
    messageStrings?: { [key: string]: MultiformatMessageString; };
    /**
     * 
     * @type {ReportingConfiguration}
     * @memberof ReportingDescriptor
     */
    defaultConfiguration?: ReportingConfiguration;
    /**
     * A URI where the primary documentation for the report can be found.
     * @type {string}
     * @memberof ReportingDescriptor
     */
    helpUri?: string;
    /**
     * 
     * @type {MultiformatMessageString}
     * @memberof ReportingDescriptor
     */
    help?: MultiformatMessageString;
    /**
     * An array of objects that describe relationships between this reporting descriptor and others.
     * @type {Set<ReportingDescriptorRelationship>}
     * @memberof ReportingDescriptor
     */
    relationships?: Set<ReportingDescriptorRelationship>;
    /**
     * 
     * @type {PropertyBag}
     * @memberof ReportingDescriptor
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the ReportingDescriptor interface.
 */
export function instanceOfReportingDescriptor(value: object): value is ReportingDescriptor {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function ReportingDescriptorFromJSON(json: any): ReportingDescriptor {
    return ReportingDescriptorFromJSONTyped(json, false);
}

export function ReportingDescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportingDescriptor {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'deprecatedIds': json['deprecatedIds'] == null ? undefined : json['deprecatedIds'],
        'guid': json['guid'] == null ? undefined : json['guid'],
        'deprecatedGuids': json['deprecatedGuids'] == null ? undefined : json['deprecatedGuids'],
        'name': json['name'] == null ? undefined : json['name'],
        'deprecatedNames': json['deprecatedNames'] == null ? undefined : json['deprecatedNames'],
        'shortDescription': json['shortDescription'] == null ? undefined : MultiformatMessageStringFromJSON(json['shortDescription']),
        'fullDescription': json['fullDescription'] == null ? undefined : MultiformatMessageStringFromJSON(json['fullDescription']),
        'messageStrings': json['messageStrings'] == null ? undefined : (mapValues(json['messageStrings'], MultiformatMessageStringFromJSON)),
        'defaultConfiguration': json['defaultConfiguration'] == null ? undefined : ReportingConfigurationFromJSON(json['defaultConfiguration']),
        'helpUri': json['helpUri'] == null ? undefined : json['helpUri'],
        'help': json['help'] == null ? undefined : MultiformatMessageStringFromJSON(json['help']),
        'relationships': json['relationships'] == null ? undefined : (new Set((json['relationships'] as Array<any>).map(ReportingDescriptorRelationshipFromJSON))),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function ReportingDescriptorToJSON(value?: ReportingDescriptor | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'deprecatedIds': value['deprecatedIds'] == null ? undefined : Array.from(value['deprecatedIds'] as Set<any>),
        'guid': value['guid'],
        'deprecatedGuids': value['deprecatedGuids'] == null ? undefined : Array.from(value['deprecatedGuids'] as Set<any>),
        'name': value['name'],
        'deprecatedNames': value['deprecatedNames'] == null ? undefined : Array.from(value['deprecatedNames'] as Set<any>),
        'shortDescription': MultiformatMessageStringToJSON(value['shortDescription']),
        'fullDescription': MultiformatMessageStringToJSON(value['fullDescription']),
        'messageStrings': value['messageStrings'] == null ? undefined : (mapValues(value['messageStrings'], MultiformatMessageStringToJSON)),
        'defaultConfiguration': ReportingConfigurationToJSON(value['defaultConfiguration']),
        'helpUri': value['helpUri'],
        'help': MultiformatMessageStringToJSON(value['help']),
        'relationships': value['relationships'] == null ? undefined : (Array.from(value['relationships'] as Set<any>).map(ReportingDescriptorRelationshipToJSON)),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


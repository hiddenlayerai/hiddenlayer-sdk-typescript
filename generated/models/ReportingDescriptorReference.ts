/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ToolComponentReference } from './ToolComponentReference';
import {
    ToolComponentReferenceFromJSON,
    ToolComponentReferenceFromJSONTyped,
    ToolComponentReferenceToJSON,
} from './ToolComponentReference';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';

/**
 * Information about how to locate a relevant reporting descriptor.
 * @export
 * @interface ReportingDescriptorReference
 */
export interface ReportingDescriptorReference {
    /**
     * The id of the descriptor.
     * @type {string}
     * @memberof ReportingDescriptorReference
     */
    id?: string;
    /**
     * The index into an array of descriptors in toolComponent.ruleDescriptors, toolComponent.notificationDescriptors, or toolComponent.taxonomyDescriptors, depending on context.
     * @type {number}
     * @memberof ReportingDescriptorReference
     */
    index?: number;
    /**
     * A guid that uniquely identifies the descriptor.
     * @type {string}
     * @memberof ReportingDescriptorReference
     */
    guid?: string;
    /**
     * 
     * @type {ToolComponentReference}
     * @memberof ReportingDescriptorReference
     */
    toolComponent?: ToolComponentReference;
    /**
     * 
     * @type {PropertyBag}
     * @memberof ReportingDescriptorReference
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the ReportingDescriptorReference interface.
 */
export function instanceOfReportingDescriptorReference(value: object): value is ReportingDescriptorReference {
    return true;
}

export function ReportingDescriptorReferenceFromJSON(json: any): ReportingDescriptorReference {
    return ReportingDescriptorReferenceFromJSONTyped(json, false);
}

export function ReportingDescriptorReferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportingDescriptorReference {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'index': json['index'] == null ? undefined : json['index'],
        'guid': json['guid'] == null ? undefined : json['guid'],
        'toolComponent': json['toolComponent'] == null ? undefined : ToolComponentReferenceFromJSON(json['toolComponent']),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function ReportingDescriptorReferenceToJSON(value?: ReportingDescriptorReference | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'index': value['index'],
        'guid': value['guid'],
        'toolComponent': ToolComponentReferenceToJSON(value['toolComponent']),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


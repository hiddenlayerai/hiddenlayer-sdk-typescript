/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WebResponse } from './WebResponse';
import {
    WebResponseFromJSON,
    WebResponseFromJSONTyped,
    WebResponseToJSON,
} from './WebResponse';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { Suppression } from './Suppression';
import {
    SuppressionFromJSON,
    SuppressionFromJSONTyped,
    SuppressionToJSON,
} from './Suppression';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { Attachment } from './Attachment';
import {
    AttachmentFromJSON,
    AttachmentFromJSONTyped,
    AttachmentToJSON,
} from './Attachment';
import type { CodeFlow } from './CodeFlow';
import {
    CodeFlowFromJSON,
    CodeFlowFromJSONTyped,
    CodeFlowToJSON,
} from './CodeFlow';
import type { ReportingDescriptorReference } from './ReportingDescriptorReference';
import {
    ReportingDescriptorReferenceFromJSON,
    ReportingDescriptorReferenceFromJSONTyped,
    ReportingDescriptorReferenceToJSON,
} from './ReportingDescriptorReference';
import type { Stack } from './Stack';
import {
    StackFromJSON,
    StackFromJSONTyped,
    StackToJSON,
} from './Stack';
import type { Graph } from './Graph';
import {
    GraphFromJSON,
    GraphFromJSONTyped,
    GraphToJSON,
} from './Graph';
import type { Fix } from './Fix';
import {
    FixFromJSON,
    FixFromJSONTyped,
    FixToJSON,
} from './Fix';
import type { WebRequest } from './WebRequest';
import {
    WebRequestFromJSON,
    WebRequestFromJSONTyped,
    WebRequestToJSON,
} from './WebRequest';
import type { GraphTraversal } from './GraphTraversal';
import {
    GraphTraversalFromJSON,
    GraphTraversalFromJSONTyped,
    GraphTraversalToJSON,
} from './GraphTraversal';
import type { ArtifactLocation } from './ArtifactLocation';
import {
    ArtifactLocationFromJSON,
    ArtifactLocationFromJSONTyped,
    ArtifactLocationToJSON,
} from './ArtifactLocation';
import type { ResultProvenance } from './ResultProvenance';
import {
    ResultProvenanceFromJSON,
    ResultProvenanceFromJSONTyped,
    ResultProvenanceToJSON,
} from './ResultProvenance';
import type { Location } from './Location';
import {
    LocationFromJSON,
    LocationFromJSONTyped,
    LocationToJSON,
} from './Location';

/**
 * A result produced by an analysis tool.
 * @export
 * @interface Result
 */
export interface Result {
    /**
     * The stable, unique identifier of the rule, if any, to which this result is relevant.
     * @type {string}
     * @memberof Result
     */
    ruleId?: string;
    /**
     * The index within the tool component rules array of the rule object associated with this result.
     * @type {number}
     * @memberof Result
     */
    ruleIndex?: number;
    /**
     * 
     * @type {ReportingDescriptorReference}
     * @memberof Result
     */
    rule?: ReportingDescriptorReference;
    /**
     * A value that categorizes results by evaluation state.
     * @type {string}
     * @memberof Result
     */
    kind?: ResultKindEnum;
    /**
     * A value specifying the severity level of the result.
     * @type {string}
     * @memberof Result
     */
    level?: ResultLevelEnum;
    /**
     * 
     * @type {Message}
     * @memberof Result
     */
    message: Message | null;
    /**
     * 
     * @type {ArtifactLocation}
     * @memberof Result
     */
    analysisTarget?: ArtifactLocation;
    /**
     * The set of locations where the result was detected. Specify only one location unless the problem indicated by the result can only be corrected by making a change at every specified location.
     * @type {Array<Location>}
     * @memberof Result
     */
    locations?: Array<Location>;
    /**
     * A stable, unique identifier for the result in the form of a GUID.
     * @type {string}
     * @memberof Result
     */
    guid?: string;
    /**
     * A stable, unique identifier for the equivalence class of logically identical results to which this result belongs, in the form of a GUID.
     * @type {string}
     * @memberof Result
     */
    correlationGuid?: string;
    /**
     * A positive integer specifying the number of times this logically unique result was observed in this run.
     * @type {number}
     * @memberof Result
     */
    occurrenceCount?: number;
    /**
     * A set of strings that contribute to the stable, unique identity of the result.
     * @type {{ [key: string]: string; }}
     * @memberof Result
     */
    partialFingerprints?: { [key: string]: string; };
    /**
     * A set of strings each of which individually defines a stable, unique identity for the result.
     * @type {{ [key: string]: string; }}
     * @memberof Result
     */
    fingerprints?: { [key: string]: string; };
    /**
     * An array of 'stack' objects relevant to the result.
     * @type {Set<Stack>}
     * @memberof Result
     */
    stacks?: Set<Stack>;
    /**
     * An array of 'codeFlow' objects relevant to the result.
     * @type {Array<CodeFlow>}
     * @memberof Result
     */
    codeFlows?: Array<CodeFlow>;
    /**
     * An array of zero or more unique graph objects associated with the result.
     * @type {Set<Graph>}
     * @memberof Result
     */
    graphs?: Set<Graph>;
    /**
     * An array of one or more unique 'graphTraversal' objects.
     * @type {Set<GraphTraversal>}
     * @memberof Result
     */
    graphTraversals?: Set<GraphTraversal>;
    /**
     * A set of locations relevant to this result.
     * @type {Set<Location>}
     * @memberof Result
     */
    relatedLocations?: Set<Location>;
    /**
     * A set of suppressions relevant to this result.
     * @type {Set<Suppression>}
     * @memberof Result
     */
    suppressions?: Set<Suppression>;
    /**
     * The state of a result relative to a baseline of a previous run.
     * @type {string}
     * @memberof Result
     */
    baselineState?: ResultBaselineStateEnum;
    /**
     * A number representing the priority or importance of the result.
     * @type {number}
     * @memberof Result
     */
    rank?: number;
    /**
     * A set of artifacts relevant to the result.
     * @type {Set<Attachment>}
     * @memberof Result
     */
    attachments?: Set<Attachment>;
    /**
     * An absolute URI at which the result can be viewed.
     * @type {string}
     * @memberof Result
     */
    hostedViewerUri?: string;
    /**
     * The URIs of the work items associated with this result.
     * @type {Set<string>}
     * @memberof Result
     */
    workItemUris?: Set<string>;
    /**
     * 
     * @type {ResultProvenance}
     * @memberof Result
     */
    provenance?: ResultProvenance;
    /**
     * An array of 'fix' objects, each of which represents a proposed fix to the problem indicated by the result.
     * @type {Set<Fix>}
     * @memberof Result
     */
    fixes?: Set<Fix>;
    /**
     * An array of references to taxonomy reporting descriptors that are applicable to the result.
     * @type {Set<ReportingDescriptorReference>}
     * @memberof Result
     */
    taxa?: Set<ReportingDescriptorReference>;
    /**
     * 
     * @type {WebRequest}
     * @memberof Result
     */
    webRequest?: WebRequest;
    /**
     * 
     * @type {WebResponse}
     * @memberof Result
     */
    webResponse?: WebResponse;
    /**
     * 
     * @type {PropertyBag}
     * @memberof Result
     */
    properties?: PropertyBag;
}


/**
 * @export
 */
export const ResultKindEnum = {
    NotApplicable: 'notApplicable',
    Pass: 'pass',
    Fail: 'fail',
    Review: 'review',
    Open: 'open',
    Informational: 'informational',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ResultKindEnum = typeof ResultKindEnum[keyof typeof ResultKindEnum];

/**
 * @export
 */
export const ResultLevelEnum = {
    None: 'none',
    Note: 'note',
    Warning: 'warning',
    Error: 'error',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ResultLevelEnum = typeof ResultLevelEnum[keyof typeof ResultLevelEnum];

/**
 * @export
 */
export const ResultBaselineStateEnum = {
    New: 'new',
    Unchanged: 'unchanged',
    Updated: 'updated',
    Absent: 'absent',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ResultBaselineStateEnum = typeof ResultBaselineStateEnum[keyof typeof ResultBaselineStateEnum];


/**
 * Check if a given object implements the Result interface.
 */
export function instanceOfResult(value: object): value is Result {
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function ResultFromJSON(json: any): Result {
    return ResultFromJSONTyped(json, false);
}

export function ResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): Result {
    if (json == null) {
        return json;
    }
    return {
        
        'ruleId': json['ruleId'] == null ? undefined : json['ruleId'],
        'ruleIndex': json['ruleIndex'] == null ? undefined : json['ruleIndex'],
        'rule': json['rule'] == null ? undefined : ReportingDescriptorReferenceFromJSON(json['rule']),
        'kind': json['kind'] == null ? undefined : json['kind'],
        'level': json['level'] == null ? undefined : json['level'],
        'message': MessageFromJSON(json['message']),
        'analysisTarget': json['analysisTarget'] == null ? undefined : ArtifactLocationFromJSON(json['analysisTarget']),
        'locations': json['locations'] == null ? undefined : ((json['locations'] as Array<any>).map(LocationFromJSON)),
        'guid': json['guid'] == null ? undefined : json['guid'],
        'correlationGuid': json['correlationGuid'] == null ? undefined : json['correlationGuid'],
        'occurrenceCount': json['occurrenceCount'] == null ? undefined : json['occurrenceCount'],
        'partialFingerprints': json['partialFingerprints'] == null ? undefined : json['partialFingerprints'],
        'fingerprints': json['fingerprints'] == null ? undefined : json['fingerprints'],
        'stacks': json['stacks'] == null ? undefined : (new Set((json['stacks'] as Array<any>).map(StackFromJSON))),
        'codeFlows': json['codeFlows'] == null ? undefined : ((json['codeFlows'] as Array<any>).map(CodeFlowFromJSON)),
        'graphs': json['graphs'] == null ? undefined : (new Set((json['graphs'] as Array<any>).map(GraphFromJSON))),
        'graphTraversals': json['graphTraversals'] == null ? undefined : (new Set((json['graphTraversals'] as Array<any>).map(GraphTraversalFromJSON))),
        'relatedLocations': json['relatedLocations'] == null ? undefined : (new Set((json['relatedLocations'] as Array<any>).map(LocationFromJSON))),
        'suppressions': json['suppressions'] == null ? undefined : (new Set((json['suppressions'] as Array<any>).map(SuppressionFromJSON))),
        'baselineState': json['baselineState'] == null ? undefined : json['baselineState'],
        'rank': json['rank'] == null ? undefined : json['rank'],
        'attachments': json['attachments'] == null ? undefined : (new Set((json['attachments'] as Array<any>).map(AttachmentFromJSON))),
        'hostedViewerUri': json['hostedViewerUri'] == null ? undefined : json['hostedViewerUri'],
        'workItemUris': json['workItemUris'] == null ? undefined : json['workItemUris'],
        'provenance': json['provenance'] == null ? undefined : ResultProvenanceFromJSON(json['provenance']),
        'fixes': json['fixes'] == null ? undefined : (new Set((json['fixes'] as Array<any>).map(FixFromJSON))),
        'taxa': json['taxa'] == null ? undefined : (new Set((json['taxa'] as Array<any>).map(ReportingDescriptorReferenceFromJSON))),
        'webRequest': json['webRequest'] == null ? undefined : WebRequestFromJSON(json['webRequest']),
        'webResponse': json['webResponse'] == null ? undefined : WebResponseFromJSON(json['webResponse']),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function ResultToJSON(value?: Result | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'ruleId': value['ruleId'],
        'ruleIndex': value['ruleIndex'],
        'rule': ReportingDescriptorReferenceToJSON(value['rule']),
        'kind': value['kind'],
        'level': value['level'],
        'message': MessageToJSON(value['message']),
        'analysisTarget': ArtifactLocationToJSON(value['analysisTarget']),
        'locations': value['locations'] == null ? undefined : ((value['locations'] as Array<any>).map(LocationToJSON)),
        'guid': value['guid'],
        'correlationGuid': value['correlationGuid'],
        'occurrenceCount': value['occurrenceCount'],
        'partialFingerprints': value['partialFingerprints'],
        'fingerprints': value['fingerprints'],
        'stacks': value['stacks'] == null ? undefined : (Array.from(value['stacks'] as Set<any>).map(StackToJSON)),
        'codeFlows': value['codeFlows'] == null ? undefined : ((value['codeFlows'] as Array<any>).map(CodeFlowToJSON)),
        'graphs': value['graphs'] == null ? undefined : (Array.from(value['graphs'] as Set<any>).map(GraphToJSON)),
        'graphTraversals': value['graphTraversals'] == null ? undefined : (Array.from(value['graphTraversals'] as Set<any>).map(GraphTraversalToJSON)),
        'relatedLocations': value['relatedLocations'] == null ? undefined : (Array.from(value['relatedLocations'] as Set<any>).map(LocationToJSON)),
        'suppressions': value['suppressions'] == null ? undefined : (Array.from(value['suppressions'] as Set<any>).map(SuppressionToJSON)),
        'baselineState': value['baselineState'],
        'rank': value['rank'],
        'attachments': value['attachments'] == null ? undefined : (Array.from(value['attachments'] as Set<any>).map(AttachmentToJSON)),
        'hostedViewerUri': value['hostedViewerUri'],
        'workItemUris': value['workItemUris'] == null ? undefined : Array.from(value['workItemUris'] as Set<any>),
        'provenance': ResultProvenanceToJSON(value['provenance']),
        'fixes': value['fixes'] == null ? undefined : (Array.from(value['fixes'] as Set<any>).map(FixToJSON)),
        'taxa': value['taxa'] == null ? undefined : (Array.from(value['taxa'] as Set<any>).map(ReportingDescriptorReferenceToJSON)),
        'webRequest': WebRequestToJSON(value['webRequest']),
        'webResponse': WebResponseToJSON(value['webResponse']),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WebResponse } from './WebResponse';
import {
    WebResponseFromJSON,
    WebResponseFromJSONTyped,
    WebResponseToJSON,
} from './WebResponse';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
} from './Address';
import type { Invocation } from './Invocation';
import {
    InvocationFromJSON,
    InvocationFromJSONTyped,
    InvocationToJSON,
} from './Invocation';
import type { VersionControlDetails } from './VersionControlDetails';
import {
    VersionControlDetailsFromJSON,
    VersionControlDetailsFromJSONTyped,
    VersionControlDetailsToJSON,
} from './VersionControlDetails';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { SpecialLocations } from './SpecialLocations';
import {
    SpecialLocationsFromJSON,
    SpecialLocationsFromJSONTyped,
    SpecialLocationsToJSON,
} from './SpecialLocations';
import type { Conversion } from './Conversion';
import {
    ConversionFromJSON,
    ConversionFromJSONTyped,
    ConversionToJSON,
} from './Conversion';
import type { ExternalPropertyFileReferences } from './ExternalPropertyFileReferences';
import {
    ExternalPropertyFileReferencesFromJSON,
    ExternalPropertyFileReferencesFromJSONTyped,
    ExternalPropertyFileReferencesToJSON,
} from './ExternalPropertyFileReferences';
import type { Artifact } from './Artifact';
import {
    ArtifactFromJSON,
    ArtifactFromJSONTyped,
    ArtifactToJSON,
} from './Artifact';
import type { LogicalLocation } from './LogicalLocation';
import {
    LogicalLocationFromJSON,
    LogicalLocationFromJSONTyped,
    LogicalLocationToJSON,
} from './LogicalLocation';
import type { ToolComponent } from './ToolComponent';
import {
    ToolComponentFromJSON,
    ToolComponentFromJSONTyped,
    ToolComponentToJSON,
} from './ToolComponent';
import type { Result } from './Result';
import {
    ResultFromJSON,
    ResultFromJSONTyped,
    ResultToJSON,
} from './Result';
import type { Graph } from './Graph';
import {
    GraphFromJSON,
    GraphFromJSONTyped,
    GraphToJSON,
} from './Graph';
import type { ThreadFlowLocation } from './ThreadFlowLocation';
import {
    ThreadFlowLocationFromJSON,
    ThreadFlowLocationFromJSONTyped,
    ThreadFlowLocationToJSON,
} from './ThreadFlowLocation';
import type { WebRequest } from './WebRequest';
import {
    WebRequestFromJSON,
    WebRequestFromJSONTyped,
    WebRequestToJSON,
} from './WebRequest';
import type { ArtifactLocation } from './ArtifactLocation';
import {
    ArtifactLocationFromJSON,
    ArtifactLocationFromJSONTyped,
    ArtifactLocationToJSON,
} from './ArtifactLocation';
import type { RunAutomationDetails } from './RunAutomationDetails';
import {
    RunAutomationDetailsFromJSON,
    RunAutomationDetailsFromJSONTyped,
    RunAutomationDetailsToJSON,
} from './RunAutomationDetails';
import type { Tool } from './Tool';
import {
    ToolFromJSON,
    ToolFromJSONTyped,
    ToolToJSON,
} from './Tool';

/**
 * Describes a single run of an analysis tool, and contains the reported output of that run.
 * @export
 * @interface Run
 */
export interface Run {
    /**
     * 
     * @type {Tool}
     * @memberof Run
     */
    tool: Tool;
    /**
     * Describes the invocation of the analysis tool.
     * @type {Array<Invocation>}
     * @memberof Run
     */
    invocations?: Array<Invocation>;
    /**
     * 
     * @type {Conversion}
     * @memberof Run
     */
    conversion?: Conversion;
    /**
     * The language of the messages emitted into the log file during this run (expressed as an ISO 639-1 two-letter lowercase culture code) and an optional region (expressed as an ISO 3166-1 two-letter uppercase subculture code associated with a country or region). The casing is recommended but not required (in order for this data to conform to RFC5646).
     * @type {string}
     * @memberof Run
     */
    language?: string;
    /**
     * Specifies the revision in version control of the artifacts that were scanned.
     * @type {Set<VersionControlDetails>}
     * @memberof Run
     */
    versionControlProvenance?: Set<VersionControlDetails>;
    /**
     * The artifact location specified by each uriBaseId symbol on the machine where the tool originally ran.
     * @type {{ [key: string]: ArtifactLocation; }}
     * @memberof Run
     */
    originalUriBaseIds?: { [key: string]: ArtifactLocation; };
    /**
     * An array of artifact objects relevant to the run.
     * @type {Set<Artifact>}
     * @memberof Run
     */
    artifacts?: Set<Artifact>;
    /**
     * An array of logical locations such as namespaces, types or functions.
     * @type {Set<LogicalLocation>}
     * @memberof Run
     */
    logicalLocations?: Set<LogicalLocation>;
    /**
     * An array of zero or more unique graph objects associated with the run.
     * @type {Set<Graph>}
     * @memberof Run
     */
    graphs?: Set<Graph>;
    /**
     * The set of results contained in an SARIF log. The results array can be omitted when a run is solely exporting rules metadata. It must be present (but may be empty) if a log file represents an actual scan.
     * @type {Array<Result>}
     * @memberof Run
     */
    results?: Array<Result>;
    /**
     * 
     * @type {RunAutomationDetails}
     * @memberof Run
     */
    automationDetails?: RunAutomationDetails;
    /**
     * Automation details that describe the aggregate of runs to which this run belongs.
     * @type {Set<RunAutomationDetails>}
     * @memberof Run
     */
    runAggregates?: Set<RunAutomationDetails>;
    /**
     * The 'guid' property of a previous SARIF 'run' that comprises the baseline that was used to compute result 'baselineState' properties for the run.
     * @type {string}
     * @memberof Run
     */
    baselineGuid?: string;
    /**
     * An array of strings used to replace sensitive information in a redaction-aware property.
     * @type {Set<string>}
     * @memberof Run
     */
    redactionTokens?: Set<string>;
    /**
     * Specifies the default encoding for any artifact object that refers to a text file.
     * @type {string}
     * @memberof Run
     */
    defaultEncoding?: string;
    /**
     * Specifies the default source language for any artifact object that refers to a text file that contains source code.
     * @type {string}
     * @memberof Run
     */
    defaultSourceLanguage?: string;
    /**
     * An ordered list of character sequences that were treated as line breaks when computing region information for the run.
     * @type {Set<string>}
     * @memberof Run
     */
    newlineSequences?: Set<string>;
    /**
     * Specifies the unit in which the tool measures columns.
     * @type {string}
     * @memberof Run
     */
    columnKind?: RunColumnKindEnum;
    /**
     * 
     * @type {ExternalPropertyFileReferences}
     * @memberof Run
     */
    externalPropertyFileReferences?: ExternalPropertyFileReferences;
    /**
     * An array of threadFlowLocation objects cached at run level.
     * @type {Set<ThreadFlowLocation>}
     * @memberof Run
     */
    threadFlowLocations?: Set<ThreadFlowLocation>;
    /**
     * An array of toolComponent objects relevant to a taxonomy in which results are categorized.
     * @type {Set<ToolComponent>}
     * @memberof Run
     */
    taxonomies?: Set<ToolComponent>;
    /**
     * Addresses associated with this run instance, if any.
     * @type {Array<Address>}
     * @memberof Run
     */
    addresses?: Array<Address>;
    /**
     * The set of available translations of the localized data provided by the tool.
     * @type {Set<ToolComponent>}
     * @memberof Run
     */
    translations?: Set<ToolComponent>;
    /**
     * Contains configurations that may potentially override both reportingDescriptor.defaultConfiguration (the tool's default severities) and invocation.configurationOverrides (severities established at run-time from the command line).
     * @type {Set<ToolComponent>}
     * @memberof Run
     */
    policies?: Set<ToolComponent>;
    /**
     * An array of request objects cached at run level.
     * @type {Set<WebRequest>}
     * @memberof Run
     */
    webRequests?: Set<WebRequest>;
    /**
     * An array of response objects cached at run level.
     * @type {Set<WebResponse>}
     * @memberof Run
     */
    webResponses?: Set<WebResponse>;
    /**
     * 
     * @type {SpecialLocations}
     * @memberof Run
     */
    specialLocations?: SpecialLocations;
    /**
     * 
     * @type {PropertyBag}
     * @memberof Run
     */
    properties?: PropertyBag;
}


/**
 * @export
 */
export const RunColumnKindEnum = {
    Utf16CodeUnits: 'utf16CodeUnits',
    UnicodeCodePoints: 'unicodeCodePoints',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type RunColumnKindEnum = typeof RunColumnKindEnum[keyof typeof RunColumnKindEnum];


/**
 * Check if a given object implements the Run interface.
 */
export function instanceOfRun(value: object): value is Run {
    if (!('tool' in value) || value['tool'] === undefined) return false;
    return true;
}

export function RunFromJSON(json: any): Run {
    return RunFromJSONTyped(json, false);
}

export function RunFromJSONTyped(json: any, ignoreDiscriminator: boolean): Run {
    if (json == null) {
        return json;
    }
    return {
        
        'tool': ToolFromJSON(json['tool']),
        'invocations': json['invocations'] == null ? undefined : ((json['invocations'] as Array<any>).map(InvocationFromJSON)),
        'conversion': json['conversion'] == null ? undefined : ConversionFromJSON(json['conversion']),
        'language': json['language'] == null ? undefined : json['language'],
        'versionControlProvenance': json['versionControlProvenance'] == null ? undefined : (new Set((json['versionControlProvenance'] as Array<any>).map(VersionControlDetailsFromJSON))),
        'originalUriBaseIds': json['originalUriBaseIds'] == null ? undefined : (mapValues(json['originalUriBaseIds'], ArtifactLocationFromJSON)),
        'artifacts': json['artifacts'] == null ? undefined : (new Set((json['artifacts'] as Array<any>).map(ArtifactFromJSON))),
        'logicalLocations': json['logicalLocations'] == null ? undefined : (new Set((json['logicalLocations'] as Array<any>).map(LogicalLocationFromJSON))),
        'graphs': json['graphs'] == null ? undefined : (new Set((json['graphs'] as Array<any>).map(GraphFromJSON))),
        'results': json['results'] == null ? undefined : ((json['results'] as Array<any>).map(ResultFromJSON)),
        'automationDetails': json['automationDetails'] == null ? undefined : RunAutomationDetailsFromJSON(json['automationDetails']),
        'runAggregates': json['runAggregates'] == null ? undefined : (new Set((json['runAggregates'] as Array<any>).map(RunAutomationDetailsFromJSON))),
        'baselineGuid': json['baselineGuid'] == null ? undefined : json['baselineGuid'],
        'redactionTokens': json['redactionTokens'] == null ? undefined : json['redactionTokens'],
        'defaultEncoding': json['defaultEncoding'] == null ? undefined : json['defaultEncoding'],
        'defaultSourceLanguage': json['defaultSourceLanguage'] == null ? undefined : json['defaultSourceLanguage'],
        'newlineSequences': json['newlineSequences'] == null ? undefined : json['newlineSequences'],
        'columnKind': json['columnKind'] == null ? undefined : json['columnKind'],
        'externalPropertyFileReferences': json['externalPropertyFileReferences'] == null ? undefined : ExternalPropertyFileReferencesFromJSON(json['externalPropertyFileReferences']),
        'threadFlowLocations': json['threadFlowLocations'] == null ? undefined : (new Set((json['threadFlowLocations'] as Array<any>).map(ThreadFlowLocationFromJSON))),
        'taxonomies': json['taxonomies'] == null ? undefined : (new Set((json['taxonomies'] as Array<any>).map(ToolComponentFromJSON))),
        'addresses': json['addresses'] == null ? undefined : ((json['addresses'] as Array<any>).map(AddressFromJSON)),
        'translations': json['translations'] == null ? undefined : (new Set((json['translations'] as Array<any>).map(ToolComponentFromJSON))),
        'policies': json['policies'] == null ? undefined : (new Set((json['policies'] as Array<any>).map(ToolComponentFromJSON))),
        'webRequests': json['webRequests'] == null ? undefined : (new Set((json['webRequests'] as Array<any>).map(WebRequestFromJSON))),
        'webResponses': json['webResponses'] == null ? undefined : (new Set((json['webResponses'] as Array<any>).map(WebResponseFromJSON))),
        'specialLocations': json['specialLocations'] == null ? undefined : SpecialLocationsFromJSON(json['specialLocations']),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function RunToJSON(value?: Run | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'tool': ToolToJSON(value['tool']),
        'invocations': value['invocations'] == null ? undefined : ((value['invocations'] as Array<any>).map(InvocationToJSON)),
        'conversion': ConversionToJSON(value['conversion']),
        'language': value['language'],
        'versionControlProvenance': value['versionControlProvenance'] == null ? undefined : (Array.from(value['versionControlProvenance'] as Set<any>).map(VersionControlDetailsToJSON)),
        'originalUriBaseIds': value['originalUriBaseIds'] == null ? undefined : (mapValues(value['originalUriBaseIds'], ArtifactLocationToJSON)),
        'artifacts': value['artifacts'] == null ? undefined : (Array.from(value['artifacts'] as Set<any>).map(ArtifactToJSON)),
        'logicalLocations': value['logicalLocations'] == null ? undefined : (Array.from(value['logicalLocations'] as Set<any>).map(LogicalLocationToJSON)),
        'graphs': value['graphs'] == null ? undefined : (Array.from(value['graphs'] as Set<any>).map(GraphToJSON)),
        'results': value['results'] == null ? undefined : ((value['results'] as Array<any>).map(ResultToJSON)),
        'automationDetails': RunAutomationDetailsToJSON(value['automationDetails']),
        'runAggregates': value['runAggregates'] == null ? undefined : (Array.from(value['runAggregates'] as Set<any>).map(RunAutomationDetailsToJSON)),
        'baselineGuid': value['baselineGuid'],
        'redactionTokens': value['redactionTokens'] == null ? undefined : Array.from(value['redactionTokens'] as Set<any>),
        'defaultEncoding': value['defaultEncoding'],
        'defaultSourceLanguage': value['defaultSourceLanguage'],
        'newlineSequences': value['newlineSequences'] == null ? undefined : Array.from(value['newlineSequences'] as Set<any>),
        'columnKind': value['columnKind'],
        'externalPropertyFileReferences': ExternalPropertyFileReferencesToJSON(value['externalPropertyFileReferences']),
        'threadFlowLocations': value['threadFlowLocations'] == null ? undefined : (Array.from(value['threadFlowLocations'] as Set<any>).map(ThreadFlowLocationToJSON)),
        'taxonomies': value['taxonomies'] == null ? undefined : (Array.from(value['taxonomies'] as Set<any>).map(ToolComponentToJSON)),
        'addresses': value['addresses'] == null ? undefined : ((value['addresses'] as Array<any>).map(AddressToJSON)),
        'translations': value['translations'] == null ? undefined : (Array.from(value['translations'] as Set<any>).map(ToolComponentToJSON)),
        'policies': value['policies'] == null ? undefined : (Array.from(value['policies'] as Set<any>).map(ToolComponentToJSON)),
        'webRequests': value['webRequests'] == null ? undefined : (Array.from(value['webRequests'] as Set<any>).map(WebRequestToJSON)),
        'webResponses': value['webResponses'] == null ? undefined : (Array.from(value['webResponses'] as Set<any>).map(WebResponseToJSON)),
        'specialLocations': SpecialLocationsToJSON(value['specialLocations']),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


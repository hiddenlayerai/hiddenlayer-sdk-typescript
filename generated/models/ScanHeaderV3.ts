/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModelInventoryInfo } from './ModelInventoryInfo';
import {
    ModelInventoryInfoFromJSON,
    ModelInventoryInfoFromJSONTyped,
    ModelInventoryInfoToJSON,
} from './ModelInventoryInfo';

/**
 * 
 * @export
 * @interface ScanHeaderV3
 */
export interface ScanHeaderV3 {
    /**
     * number of files scanned
     * @type {number}
     * @memberof ScanHeaderV3
     */
    fileCount: number;
    /**
     * number of files with detections found
     * @type {number}
     * @memberof ScanHeaderV3
     */
    filesWithDetectionsCount: number;
    /**
     * number of detections found
     * @type {number}
     * @memberof ScanHeaderV3
     */
    detectionCount: number;
    /**
     * list of detection categories found
     * @type {Array<string>}
     * @memberof ScanHeaderV3
     */
    detectionCategories?: Array<string>;
    /**
     * 
     * @type {ModelInventoryInfo}
     * @memberof ScanHeaderV3
     */
    inventory: ModelInventoryInfo;
    /**
     * scanner version
     * @type {string}
     * @memberof ScanHeaderV3
     */
    version: string;
    /**
     * unique identifier for the scan
     * @type {string}
     * @memberof ScanHeaderV3
     */
    scanId: string;
    /**
     * time the scan started
     * @type {Date}
     * @memberof ScanHeaderV3
     */
    startTime: Date;
    /**
     * time the scan ended
     * @type {Date}
     * @memberof ScanHeaderV3
     */
    endTime?: Date;
    /**
     * status of the scan
     * @type {string}
     * @memberof ScanHeaderV3
     */
    status: ScanHeaderV3StatusEnum;
    /**
     * detection severity
     * @type {string}
     * @memberof ScanHeaderV3
     */
    severity?: ScanHeaderV3SeverityEnum;
}


/**
 * @export
 */
export const ScanHeaderV3StatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Done: 'done',
    Failed: 'failed',
    Canceled: 'canceled',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ScanHeaderV3StatusEnum = typeof ScanHeaderV3StatusEnum[keyof typeof ScanHeaderV3StatusEnum];

/**
 * @export
 */
export const ScanHeaderV3SeverityEnum = {
    Low: 'low',
    Medium: 'medium',
    High: 'high',
    Critical: 'critical',
    Safe: 'safe',
    Unknown: 'unknown',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ScanHeaderV3SeverityEnum = typeof ScanHeaderV3SeverityEnum[keyof typeof ScanHeaderV3SeverityEnum];


/**
 * Check if a given object implements the ScanHeaderV3 interface.
 */
export function instanceOfScanHeaderV3(value: object): value is ScanHeaderV3 {
    if (!('fileCount' in value) || value['fileCount'] === undefined) return false;
    if (!('filesWithDetectionsCount' in value) || value['filesWithDetectionsCount'] === undefined) return false;
    if (!('detectionCount' in value) || value['detectionCount'] === undefined) return false;
    if (!('inventory' in value) || value['inventory'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('scanId' in value) || value['scanId'] === undefined) return false;
    if (!('startTime' in value) || value['startTime'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function ScanHeaderV3FromJSON(json: any): ScanHeaderV3 {
    return ScanHeaderV3FromJSONTyped(json, false);
}

export function ScanHeaderV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): ScanHeaderV3 {
    if (json == null) {
        return json;
    }
    return {
        
        'fileCount': json['file_count'],
        'filesWithDetectionsCount': json['files_with_detections_count'],
        'detectionCount': json['detection_count'],
        'detectionCategories': json['detection_categories'] == null ? undefined : json['detection_categories'],
        'inventory': ModelInventoryInfoFromJSON(json['inventory']),
        'version': json['version'],
        'scanId': json['scan_id'],
        'startTime': (new Date(json['start_time'])),
        'endTime': json['end_time'] == null ? undefined : (new Date(json['end_time'])),
        'status': json['status'],
        'severity': json['severity'] == null ? undefined : json['severity'],
    };
}

export function ScanHeaderV3ToJSON(value?: ScanHeaderV3 | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'file_count': value['fileCount'],
        'files_with_detections_count': value['filesWithDetectionsCount'],
        'detection_count': value['detectionCount'],
        'detection_categories': value['detectionCategories'],
        'inventory': ModelInventoryInfoToJSON(value['inventory']),
        'version': value['version'],
        'scan_id': value['scanId'],
        'start_time': ((value['startTime']).toISOString()),
        'end_time': value['endTime'] == null ? undefined : ((value['endTime']).toISOString()),
        'status': value['status'],
        'severity': value['severity'],
    };
}


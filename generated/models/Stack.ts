/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { StackFrame } from './StackFrame';
import {
    StackFrameFromJSON,
    StackFrameFromJSONTyped,
    StackFrameToJSON,
} from './StackFrame';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';

/**
 * A call stack that is relevant to a result.
 * @export
 * @interface Stack
 */
export interface Stack {
    /**
     * 
     * @type {Message}
     * @memberof Stack
     */
    message?: Message;
    /**
     * An array of stack frames that represents a sequence of calls, rendered in reverse chronological order, that comprise the call stack.
     * @type {Array<StackFrame>}
     * @memberof Stack
     */
    frames: Array<StackFrame>;
    /**
     * 
     * @type {PropertyBag}
     * @memberof Stack
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the Stack interface.
 */
export function instanceOfStack(value: object): value is Stack {
    if (!('frames' in value) || value['frames'] === undefined) return false;
    return true;
}

export function StackFromJSON(json: any): Stack {
    return StackFromJSONTyped(json, false);
}

export function StackFromJSONTyped(json: any, ignoreDiscriminator: boolean): Stack {
    if (json == null) {
        return json;
    }
    return {
        
        'message': json['message'] == null ? undefined : MessageFromJSON(json['message']),
        'frames': ((json['frames'] as Array<any>).map(StackFrameFromJSON)),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function StackToJSON(value?: Stack | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'message': MessageToJSON(value['message']),
        'frames': ((value['frames'] as Array<any>).map(StackFrameToJSON)),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


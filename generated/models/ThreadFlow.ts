/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer ModelScan V2
 * HiddenLayer ModelScan API for scanning of models
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ThreadFlowLocation } from './ThreadFlowLocation';
import {
    ThreadFlowLocationFromJSON,
    ThreadFlowLocationFromJSONTyped,
    ThreadFlowLocationToJSON,
} from './ThreadFlowLocation';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { MultiformatMessageString } from './MultiformatMessageString';
import {
    MultiformatMessageStringFromJSON,
    MultiformatMessageStringFromJSONTyped,
    MultiformatMessageStringToJSON,
} from './MultiformatMessageString';

/**
 * Describes a sequence of code locations that specify a path through a single thread of execution such as an operating system or fiber.
 * @export
 * @interface ThreadFlow
 */
export interface ThreadFlow {
    /**
     * An string that uniquely identifies the threadFlow within the codeFlow in which it occurs.
     * @type {string}
     * @memberof ThreadFlow
     */
    id?: string;
    /**
     * 
     * @type {Message}
     * @memberof ThreadFlow
     */
    message?: Message;
    /**
     * Values of relevant expressions at the start of the thread flow that may change during thread flow execution.
     * @type {{ [key: string]: MultiformatMessageString; }}
     * @memberof ThreadFlow
     */
    initialState?: { [key: string]: MultiformatMessageString; };
    /**
     * Values of relevant expressions at the start of the thread flow that remain constant.
     * @type {{ [key: string]: MultiformatMessageString; }}
     * @memberof ThreadFlow
     */
    immutableState?: { [key: string]: MultiformatMessageString; };
    /**
     * A temporally ordered array of 'threadFlowLocation' objects, each of which describes a location visited by the tool while producing the result.
     * @type {Array<ThreadFlowLocation>}
     * @memberof ThreadFlow
     */
    locations: Array<ThreadFlowLocation>;
    /**
     * 
     * @type {PropertyBag}
     * @memberof ThreadFlow
     */
    properties?: PropertyBag;
}

/**
 * Check if a given object implements the ThreadFlow interface.
 */
export function instanceOfThreadFlow(value: object): value is ThreadFlow {
    if (!('locations' in value) || value['locations'] === undefined) return false;
    return true;
}

export function ThreadFlowFromJSON(json: any): ThreadFlow {
    return ThreadFlowFromJSONTyped(json, false);
}

export function ThreadFlowFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThreadFlow {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'message': json['message'] == null ? undefined : MessageFromJSON(json['message']),
        'initialState': json['initialState'] == null ? undefined : (mapValues(json['initialState'], MultiformatMessageStringFromJSON)),
        'immutableState': json['immutableState'] == null ? undefined : (mapValues(json['immutableState'], MultiformatMessageStringFromJSON)),
        'locations': ((json['locations'] as Array<any>).map(ThreadFlowLocationFromJSON)),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function ThreadFlowToJSON(value?: ThreadFlow | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'message': MessageToJSON(value['message']),
        'initialState': value['initialState'] == null ? undefined : (mapValues(value['initialState'], MultiformatMessageStringToJSON)),
        'immutableState': value['immutableState'] == null ? undefined : (mapValues(value['immutableState'], MultiformatMessageStringToJSON)),
        'locations': ((value['locations'] as Array<any>).map(ThreadFlowLocationToJSON)),
        'properties': PropertyBagToJSON(value['properties']),
    };
}


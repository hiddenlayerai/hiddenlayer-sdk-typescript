/* tslint:disable */
/* eslint-disable */
/**
 * HiddenLayer-API
 * HiddenLayer-API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ToolComponentReference } from './ToolComponentReference';
import {
    ToolComponentReferenceFromJSON,
    ToolComponentReferenceFromJSONTyped,
    ToolComponentReferenceToJSON,
} from './ToolComponentReference';
import type { TranslationMetadata } from './TranslationMetadata';
import {
    TranslationMetadataFromJSON,
    TranslationMetadataFromJSONTyped,
    TranslationMetadataToJSON,
} from './TranslationMetadata';
import type { PropertyBag } from './PropertyBag';
import {
    PropertyBagFromJSON,
    PropertyBagFromJSONTyped,
    PropertyBagToJSON,
} from './PropertyBag';
import type { ArtifactLocation } from './ArtifactLocation';
import {
    ArtifactLocationFromJSON,
    ArtifactLocationFromJSONTyped,
    ArtifactLocationToJSON,
} from './ArtifactLocation';
import type { MultiformatMessageString } from './MultiformatMessageString';
import {
    MultiformatMessageStringFromJSON,
    MultiformatMessageStringFromJSONTyped,
    MultiformatMessageStringToJSON,
} from './MultiformatMessageString';
import type { ReportingDescriptor } from './ReportingDescriptor';
import {
    ReportingDescriptorFromJSON,
    ReportingDescriptorFromJSONTyped,
    ReportingDescriptorToJSON,
} from './ReportingDescriptor';

/**
 * A component, such as a plug-in or the driver, of the analysis tool that was run.
 * @export
 * @interface ToolComponent
 */
export interface ToolComponent {
    /**
     * A unique identifier for the tool component in the form of a GUID.
     * @type {string}
     * @memberof ToolComponent
     */
    guid?: string;
    /**
     * The name of the tool component.
     * @type {string}
     * @memberof ToolComponent
     */
    name: string;
    /**
     * The organization or company that produced the tool component.
     * @type {string}
     * @memberof ToolComponent
     */
    organization?: string;
    /**
     * A product suite to which the tool component belongs.
     * @type {string}
     * @memberof ToolComponent
     */
    product?: string;
    /**
     * A localizable string containing the name of the suite of products to which the tool component belongs.
     * @type {string}
     * @memberof ToolComponent
     */
    productSuite?: string;
    /**
     * 
     * @type {MultiformatMessageString}
     * @memberof ToolComponent
     */
    shortDescription?: MultiformatMessageString;
    /**
     * 
     * @type {MultiformatMessageString}
     * @memberof ToolComponent
     */
    fullDescription?: MultiformatMessageString;
    /**
     * The name of the tool component along with its version and any other useful identifying information, such as its locale.
     * @type {string}
     * @memberof ToolComponent
     */
    fullName?: string;
    /**
     * The tool component version, in whatever format the component natively provides.
     * @type {string}
     * @memberof ToolComponent
     */
    version?: string;
    /**
     * The tool component version in the format specified by Semantic Versioning 2.0.
     * @type {string}
     * @memberof ToolComponent
     */
    semanticVersion?: string;
    /**
     * The binary version of the tool component's primary executable file expressed as four non-negative integers separated by a period (for operating systems that express file versions in this way).
     * @type {string}
     * @memberof ToolComponent
     */
    dottedQuadFileVersion?: string;
    /**
     * A string specifying the UTC date (and optionally, the time) of the component's release.
     * @type {string}
     * @memberof ToolComponent
     */
    releaseDateUtc?: string;
    /**
     * The absolute URI from which the tool component can be downloaded.
     * @type {string}
     * @memberof ToolComponent
     */
    downloadUri?: string;
    /**
     * The absolute URI at which information about this version of the tool component can be found.
     * @type {string}
     * @memberof ToolComponent
     */
    informationUri?: string;
    /**
     * A dictionary, each of whose keys is a resource identifier and each of whose values is a multiformatMessageString object, which holds message strings in plain text and (optionally) Markdown format. The strings can include placeholders, which can be used to construct a message in combination with an arbitrary number of additional string arguments.
     * @type {{ [key: string]: MultiformatMessageString; }}
     * @memberof ToolComponent
     */
    globalMessageStrings?: { [key: string]: MultiformatMessageString; };
    /**
     * An array of reportingDescriptor objects relevant to the notifications related to the configuration and runtime execution of the tool component.
     * @type {Set<ReportingDescriptor>}
     * @memberof ToolComponent
     */
    notifications?: Set<ReportingDescriptor>;
    /**
     * An array of reportingDescriptor objects relevant to the analysis performed by the tool component.
     * @type {Set<ReportingDescriptor>}
     * @memberof ToolComponent
     */
    rules?: Set<ReportingDescriptor>;
    /**
     * An array of reportingDescriptor objects relevant to the definitions of both standalone and tool-defined taxonomies.
     * @type {Set<ReportingDescriptor>}
     * @memberof ToolComponent
     */
    taxa?: Set<ReportingDescriptor>;
    /**
     * An array of the artifactLocation objects associated with the tool component.
     * @type {Array<ArtifactLocation>}
     * @memberof ToolComponent
     */
    locations?: Array<ArtifactLocation>;
    /**
     * The language of the messages emitted into the log file during this run (expressed as an ISO 639-1 two-letter lowercase language code) and an optional region (expressed as an ISO 3166-1 two-letter uppercase subculture code associated with a country or region). The casing is recommended but not required (in order for this data to conform to RFC5646).
     * @type {string}
     * @memberof ToolComponent
     */
    language?: string;
    /**
     * The kinds of data contained in this object.
     * @type {Set<string>}
     * @memberof ToolComponent
     */
    contents?: Set<ToolComponentContentsEnum>;
    /**
     * Specifies whether this object contains a complete definition of the localizable and/or non-localizable data for this component, as opposed to including only data that is relevant to the results persisted to this log file.
     * @type {boolean}
     * @memberof ToolComponent
     */
    isComprehensive?: boolean;
    /**
     * The semantic version of the localized strings defined in this component; maintained by components that provide translations.
     * @type {string}
     * @memberof ToolComponent
     */
    localizedDataSemanticVersion?: string;
    /**
     * The minimum value of localizedDataSemanticVersion required in translations consumed by this component; used by components that consume translations.
     * @type {string}
     * @memberof ToolComponent
     */
    minimumRequiredLocalizedDataSemanticVersion?: string;
    /**
     * 
     * @type {ToolComponentReference}
     * @memberof ToolComponent
     */
    associatedComponent?: ToolComponentReference;
    /**
     * 
     * @type {TranslationMetadata}
     * @memberof ToolComponent
     */
    translationMetadata?: TranslationMetadata;
    /**
     * An array of toolComponentReference objects to declare the taxonomies supported by the tool component.
     * @type {Set<ToolComponentReference>}
     * @memberof ToolComponent
     */
    supportedTaxonomies?: Set<ToolComponentReference>;
    /**
     * 
     * @type {PropertyBag}
     * @memberof ToolComponent
     */
    properties?: PropertyBag;
}


/**
 * @export
 */
export const ToolComponentContentsEnum = {
    LocalizedData: 'localizedData',
    NonLocalizedData: 'nonLocalizedData',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ToolComponentContentsEnum = typeof ToolComponentContentsEnum[keyof typeof ToolComponentContentsEnum];


/**
 * Check if a given object implements the ToolComponent interface.
 */
export function instanceOfToolComponent(value: object): value is ToolComponent {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function ToolComponentFromJSON(json: any): ToolComponent {
    return ToolComponentFromJSONTyped(json, false);
}

export function ToolComponentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolComponent {
    if (json == null) {
        return json;
    }
    return {
        
        'guid': json['guid'] == null ? undefined : json['guid'],
        'name': json['name'],
        'organization': json['organization'] == null ? undefined : json['organization'],
        'product': json['product'] == null ? undefined : json['product'],
        'productSuite': json['productSuite'] == null ? undefined : json['productSuite'],
        'shortDescription': json['shortDescription'] == null ? undefined : MultiformatMessageStringFromJSON(json['shortDescription']),
        'fullDescription': json['fullDescription'] == null ? undefined : MultiformatMessageStringFromJSON(json['fullDescription']),
        'fullName': json['fullName'] == null ? undefined : json['fullName'],
        'version': json['version'] == null ? undefined : json['version'],
        'semanticVersion': json['semanticVersion'] == null ? undefined : json['semanticVersion'],
        'dottedQuadFileVersion': json['dottedQuadFileVersion'] == null ? undefined : json['dottedQuadFileVersion'],
        'releaseDateUtc': json['releaseDateUtc'] == null ? undefined : json['releaseDateUtc'],
        'downloadUri': json['downloadUri'] == null ? undefined : json['downloadUri'],
        'informationUri': json['informationUri'] == null ? undefined : json['informationUri'],
        'globalMessageStrings': json['globalMessageStrings'] == null ? undefined : (mapValues(json['globalMessageStrings'], MultiformatMessageStringFromJSON)),
        'notifications': json['notifications'] == null ? undefined : (new Set((json['notifications'] as Array<any>).map(ReportingDescriptorFromJSON))),
        'rules': json['rules'] == null ? undefined : (new Set((json['rules'] as Array<any>).map(ReportingDescriptorFromJSON))),
        'taxa': json['taxa'] == null ? undefined : (new Set((json['taxa'] as Array<any>).map(ReportingDescriptorFromJSON))),
        'locations': json['locations'] == null ? undefined : ((json['locations'] as Array<any>).map(ArtifactLocationFromJSON)),
        'language': json['language'] == null ? undefined : json['language'],
        'contents': json['contents'] == null ? undefined : json['contents'],
        'isComprehensive': json['isComprehensive'] == null ? undefined : json['isComprehensive'],
        'localizedDataSemanticVersion': json['localizedDataSemanticVersion'] == null ? undefined : json['localizedDataSemanticVersion'],
        'minimumRequiredLocalizedDataSemanticVersion': json['minimumRequiredLocalizedDataSemanticVersion'] == null ? undefined : json['minimumRequiredLocalizedDataSemanticVersion'],
        'associatedComponent': json['associatedComponent'] == null ? undefined : ToolComponentReferenceFromJSON(json['associatedComponent']),
        'translationMetadata': json['translationMetadata'] == null ? undefined : TranslationMetadataFromJSON(json['translationMetadata']),
        'supportedTaxonomies': json['supportedTaxonomies'] == null ? undefined : (new Set((json['supportedTaxonomies'] as Array<any>).map(ToolComponentReferenceFromJSON))),
        'properties': json['properties'] == null ? undefined : PropertyBagFromJSON(json['properties']),
    };
}

export function ToolComponentToJSON(value?: ToolComponent | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'guid': value['guid'],
        'name': value['name'],
        'organization': value['organization'],
        'product': value['product'],
        'productSuite': value['productSuite'],
        'shortDescription': MultiformatMessageStringToJSON(value['shortDescription']),
        'fullDescription': MultiformatMessageStringToJSON(value['fullDescription']),
        'fullName': value['fullName'],
        'version': value['version'],
        'semanticVersion': value['semanticVersion'],
        'dottedQuadFileVersion': value['dottedQuadFileVersion'],
        'releaseDateUtc': value['releaseDateUtc'],
        'downloadUri': value['downloadUri'],
        'informationUri': value['informationUri'],
        'globalMessageStrings': value['globalMessageStrings'] == null ? undefined : (mapValues(value['globalMessageStrings'], MultiformatMessageStringToJSON)),
        'notifications': value['notifications'] == null ? undefined : (Array.from(value['notifications'] as Set<any>).map(ReportingDescriptorToJSON)),
        'rules': value['rules'] == null ? undefined : (Array.from(value['rules'] as Set<any>).map(ReportingDescriptorToJSON)),
        'taxa': value['taxa'] == null ? undefined : (Array.from(value['taxa'] as Set<any>).map(ReportingDescriptorToJSON)),
        'locations': value['locations'] == null ? undefined : ((value['locations'] as Array<any>).map(ArtifactLocationToJSON)),
        'language': value['language'],
        'contents': value['contents'] == null ? undefined : Array.from(value['contents'] as Set<any>),
        'isComprehensive': value['isComprehensive'],
        'localizedDataSemanticVersion': value['localizedDataSemanticVersion'],
        'minimumRequiredLocalizedDataSemanticVersion': value['minimumRequiredLocalizedDataSemanticVersion'],
        'associatedComponent': ToolComponentReferenceToJSON(value['associatedComponent']),
        'translationMetadata': TranslationMetadataToJSON(value['translationMetadata']),
        'supportedTaxonomies': value['supportedTaxonomies'] == null ? undefined : (Array.from(value['supportedTaxonomies'] as Set<any>).map(ToolComponentReferenceToJSON)),
        'properties': PropertyBagToJSON(value['properties']),
    };
}

